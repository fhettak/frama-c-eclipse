/* Auto-generated by JFlex */

package net.eclipse.why.editeur.lexer;

import java_cup.runtime.*;



%%



%public
%class whyLexer
//%implements sym
%unicode
%cup
%cupdebug
%line
%column


%{
/*   VERBATIM    */
  StringBuffer string = new StringBuffer();
  
  private WhySymbol symbol(int type) {
    return new WhySymbol(type, yyline+1, yycolumn+1);
  }

  private WhySymbol symbol(int type, Object value) {
    return new WhySymbol(type, yyline+1, yycolumn+1, value);
  }
%}


/* main character classes */
NewLine = \n
Space = " "|\t|\r
Alpha = [a-zA-Z]
Letter = {Alpha}|"_"
Digit = [0-9]
Ident = {Letter} ({Letter}|{Digit}|\')*
Integer = {Digit}+
Float = ({Digit}+ \. {Digit}*)|({Digit}* \. {Digit}+)

/* comments */
Comment = {TraditionalComment}
TraditionalComment = "(*" [^*] ~"*)" | "(*" "*"+ ")"


%state STRING



%%



<YYINITIAL> {
	/* keywords */
	"absurd"		{ return symbol(sym.ABSURD); 		}
	"and"			{ return symbol(sym.AND); 		}
    	"array"			{ return symbol(sym.ARRAY); 		}
	"as"			{ return symbol(sym.AS); 		}
	"assert"		{ return symbol(sym.ASSERT); 		}
	"axiom"			{ return symbol(sym.AXIOM); 		}
	"begin"			{ return symbol(sym.BEGIN); 		}
   	"bool"			{ return symbol(sym.BOOL); 		}
	"do"			{ return symbol(sym.DO); 		}
	"done"			{ return symbol(sym.DONE); 		}
    	"else"			{ return symbol(sym.ELSE); 		}
	"end"			{ return symbol(sym.END); 		}
	"exception"		{ return symbol(sym.EXCEPTION);		} 
	"exists"		{ return symbol(sym.EXISTS); 		}
	"external"		{ return symbol(sym.EXTERNAL); 		}
    	"false"			{ return symbol(sym.FALSE); 		}
	"for"			{ return symbol(sym.FOR); 		}
	"forall"		{ return symbol(sym.FORALL); 		}
	"fun"			{ return symbol(sym.FUN); 		}
	"function"		{ return symbol(sym.FUNCTION); 		}
	"goal"			{ return symbol(sym.GOAL); 		}
	"if"			{ return symbol(sym.IF); 		}
	"in"			{ return symbol(sym.IN); 		}
	"int"			{ return symbol(sym.INT); 		}
	"invariant"		{ return symbol(sym.INVARIANT); 	}
	"let"			{ return symbol(sym.LET); 		}
	"logic"			{ return symbol(sym.LOGIC); 		}
	"not"			{ return symbol(sym.NOT); 		}
	"of"			{ return symbol(sym.OF); 		}
	"or"			{ return symbol(sym.OR); 		}
	"parameter"		{ return symbol(sym.PARAMETER); 	}
	"predicate"		{ return symbol(sym.PREDICATE); 	}
	"prop"			{ return symbol(sym.PROP); 		}
	"raise"			{ return symbol(sym.RAISE); 		}
	"raises"		{ return symbol(sym.RAISES); 		}
	"reads"			{ return symbol(sym.READS); 		}
	"real"			{ return symbol(sym.REAL); 		}
	"rec"			{ return symbol(sym.REC); 		}
	"ref"			{ return symbol(sym.REF); 		}
	"returns"		{ return symbol(sym.RETURNS); 		}
	"then"			{ return symbol(sym.THEN); 		}
	"true"			{ return symbol(sym.TRUE); 		}
	"try"			{ return symbol(sym.TRY); 		}
	"type"			{ return symbol(sym.TYPE); 		}
	"unit"			{ return symbol(sym.UNIT); 		}
	"variant"		{ return symbol(sym.VARIANT); 		}
	"void"			{ return symbol(sym.VOID); 		}
	"while"			{ return symbol(sym.WHILE); 		}
	"with"			{ return symbol(sym.WITH); 		}
    	"writes"		{ return symbol(sym.WRITES); 		}

	/*symbols*/
	//"(*"			{ return symbol();			}
	//"*)"			{ return symbol();			}
	"'"			{ return symbol(sym.QUOTE);		}
	","			{ return symbol(sym.COMMA);		}
	"("			{ return symbol(sym.LEFTPAR);		}
	")"			{ return symbol(sym.RIGHTPAR);		}
	"!"			{ return symbol(sym.BANG);		}
	":"			{ return symbol(sym.COLON);		}
	";"			{ return symbol(sym.SEMICOLON);		}
	":="			{ return symbol(sym.COLONEQUAL);	}
	"->"			{ return symbol(sym.ARROW);		}
	"<->"			{ return symbol(sym.LRARROW);		}
	"="			{ return symbol(sym.EQUAL);		}
	"<"			{ return symbol(sym.LT);		}
	"<="			{ return symbol(sym.LE);		}
	">"			{ return symbol(sym.GT);		}
	">="			{ return symbol(sym.GE);		}
	"<>"			{ return symbol(sym.NOTEQ);		}
	"+"			{ return symbol(sym.PLUS);		}
	"-"			{ return symbol(sym.MINUS);		}
	"*"			{ return symbol(sym.TIMES);		}
	"/"			{ return symbol(sym.SLASH);		}
	"%"			{ return symbol(sym.PERCENT);		}
	"@"			{ return symbol(sym.AT);		}
	"."			{ return symbol(sym.DOT);		}
	"["			{ return symbol(sym.LEFTSQ);		}
	"]"			{ return symbol(sym.RIGHTSQ);		}
	"{"			{ return symbol(sym.LEFTB);		}
	"}"			{ return symbol(sym.RIGHTB);		}
	"{{"			{ return symbol(sym.LEFTBLEFTB);	}
	"}}"			{ return symbol(sym.RIGHTBRIGHTB);	}
	"|"			{ return symbol(sym.BAR);		}
	"||"			{ return symbol(sym.BARBAR);		}
	"&&"			{ return symbol(sym.AMPAMP);		}
	"=>"			{ return symbol(sym.BIGARROW);		}
	//"\""			{ return symbol();			}

	/*string*/
	\"                      { yybegin(STRING); string.setLength(0); }

	/*identifier*/
	{Ident}			{ return symbol(sym.IDENTIFIER, yytext()); }

	/*integer*/
	{Integer}		{ return symbol(sym.INTEGER_LITERAL, yytext()); }

	/*float*/
	{Float}			{ return symbol(sym.FLOAT_LITERAL, yytext()); }

	/*new line*/
	{NewLine}		{ /* ignore */ }

	/*space*/
	{Space}+		{ /* ignore */ }

	/*comments*/
	{Comment}		{ /* ignore */ }
}

<STRING> {
 	\"                      { yybegin(YYINITIAL); return symbol(sym.STRING_LITERAL, string.toString()); }
	[^\n\"\\]+              { string.append( yytext() ); 	}
	\\n                     { string.append('\n'); 		}
	\\\"                    { string.append('\"'); 		}
	\\\\                    { string.append('\\'); 		}
}

/* error fallback */
.|\n                             { throw new RuntimeException("Illegal character \""+yytext()+"\" at line "+yyline+", column "+yycolumn); }
<<EOF>>                          { return symbol(sym.EOF); 	}
