/* The following code was generated by JFlex 1.4.1 on 7-mar-08 4:01:16  */

/* Auto-generated by JFlex */

package net.eclipse.why.editeur.lexer;

import java_cup.runtime.*;




/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 7-mar-08 4:01:16  from the specification file
 * <tt>whyLexer.flex</tt>
 */
public class whyLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\2\1\1\2\0\1\2\22\0\1\2\1\41\1\62\2\0"+
    "\1\52\1\61\1\5\1\7\1\11\1\10\1\50\1\40\1\45\1\6"+
    "\1\51\12\4\1\42\1\43\1\47\1\44\1\46\1\0\1\53\32\3"+
    "\1\54\1\63\1\55\1\0\1\3\1\0\1\12\1\13\1\32\1\17"+
    "\1\22\1\34\1\30\1\36\1\25\2\3\1\31\1\27\1\20\1\26"+
    "\1\33\1\3\1\16\1\14\1\23\1\15\1\35\1\37\1\24\1\21"+
    "\1\3\1\56\1\60\1\57\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\20\3\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\1\1\33\1\34\1\35"+
    "\1\1\1\36\1\0\1\3\1\37\10\3\1\40\7\3"+
    "\1\41\1\42\1\43\1\44\15\3\1\45\1\46\1\47"+
    "\1\50\1\51\1\0\1\52\1\53\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\2\0\3\3\1\62\7\3\1\63"+
    "\1\64\1\3\1\65\1\66\5\3\1\67\2\3\1\70"+
    "\2\3\1\71\5\3\1\72\1\73\5\3\1\74\1\0"+
    "\5\3\1\75\1\76\2\3\1\77\1\3\1\100\3\3"+
    "\1\101\1\102\1\103\1\104\1\3\1\105\3\3\1\106"+
    "\4\3\1\107\1\3\1\110\3\3\1\111\1\112\1\113"+
    "\1\114\1\115\5\3\1\116\2\3\1\117\4\3\1\120"+
    "\1\121\1\122\1\123\2\3\1\124\5\3\1\125\1\3"+
    "\1\126\1\127\6\3\1\130\1\131\4\3\1\132\1\133"+
    "\1\134\1\135\1\136";

  private static int [] zzUnpackAction() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\150\0\234\0\320\0\u0104\0\150"+
    "\0\u0138\0\u016c\0\150\0\150\0\u01a0\0\u01d4\0\u0208\0\u023c"+
    "\0\u0270\0\u02a4\0\u02d8\0\u030c\0\u0340\0\u0374\0\u03a8\0\u03dc"+
    "\0\u0410\0\u0444\0\u0478\0\u04ac\0\150\0\150\0\u04e0\0\150"+
    "\0\u0514\0\u0548\0\u057c\0\u05b0\0\150\0\150\0\150\0\150"+
    "\0\150\0\150\0\u05e4\0\u0618\0\u064c\0\u0680\0\150\0\u06b4"+
    "\0\150\0\u06e8\0\u0138\0\u071c\0\u0750\0\u0784\0\u07b8\0\u07ec"+
    "\0\u0820\0\u0854\0\u0888\0\u08bc\0\u08f0\0\u0924\0\u0958\0\u098c"+
    "\0\u09c0\0\u09f4\0\u0a28\0\u0a5c\0\u0a90\0\u0ac4\0\u0af8\0\320"+
    "\0\320\0\320\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\u0c30"+
    "\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68\0\u0d9c\0\150"+
    "\0\150\0\150\0\150\0\150\0\u0dd0\0\150\0\150\0\150"+
    "\0\150\0\150\0\150\0\150\0\150\0\u0e04\0\u0e38\0\u0e6c"+
    "\0\u0ea0\0\u0ed4\0\320\0\u0f08\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8"+
    "\0\u100c\0\u1040\0\320\0\320\0\u1074\0\320\0\320\0\u10a8"+
    "\0\u10dc\0\u1110\0\u1144\0\u1178\0\320\0\u11ac\0\u11e0\0\320"+
    "\0\u1214\0\u1248\0\320\0\u127c\0\u12b0\0\u12e4\0\u1318\0\u134c"+
    "\0\u1380\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484\0\u14b8\0\150"+
    "\0\u14ec\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0\0\320\0\320"+
    "\0\u1624\0\u1658\0\320\0\u168c\0\320\0\u16c0\0\u16f4\0\u1728"+
    "\0\320\0\320\0\320\0\320\0\u175c\0\320\0\u1790\0\u17c4"+
    "\0\u17f8\0\320\0\u182c\0\u1860\0\u1894\0\u18c8\0\320\0\u18fc"+
    "\0\320\0\u1930\0\u1964\0\u1998\0\320\0\320\0\320\0\u19cc"+
    "\0\320\0\u1a00\0\u1a34\0\u1a68\0\u1a9c\0\u1ad0\0\320\0\u1b04"+
    "\0\u1b38\0\320\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\320\0\320"+
    "\0\320\0\320\0\u1c3c\0\u1c70\0\320\0\u1ca4\0\u1cd8\0\u1d0c"+
    "\0\u1d40\0\u1d74\0\320\0\u1da8\0\320\0\320\0\u1ddc\0\u1e10"+
    "\0\u1e44\0\u1e78\0\u1eac\0\u1ee0\0\320\0\320\0\u1f14\0\u1f48"+
    "\0\u1f7c\0\u1fb0\0\320\0\320\0\320\0\320\0\320";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\6\1\17\1\20\1\21"+
    "\1\22\1\6\1\23\1\24\1\6\1\25\1\26\1\6"+
    "\1\27\1\30\1\6\1\31\1\32\1\33\1\6\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\1\3\1\60\1\3\60\60\1\61"+
    "\1\62\66\0\1\5\64\0\3\6\4\0\26\6\30\0"+
    "\1\7\1\0\1\63\61\0\1\63\67\0\1\64\56\0"+
    "\3\6\4\0\1\6\1\65\1\66\1\6\1\67\1\6"+
    "\1\70\3\6\1\71\13\6\27\0\3\6\4\0\10\6"+
    "\1\72\3\6\1\73\11\6\27\0\3\6\4\0\6\6"+
    "\1\74\17\6\27\0\3\6\4\0\1\75\7\6\1\76"+
    "\15\6\27\0\3\6\4\0\14\6\1\77\11\6\27\0"+
    "\3\6\4\0\14\6\1\100\11\6\27\0\3\6\4\0"+
    "\6\6\1\101\3\6\1\102\4\6\1\103\6\6\27\0"+
    "\3\6\4\0\4\6\1\104\2\6\1\105\14\6\1\106"+
    "\1\6\27\0\3\6\4\0\6\6\1\107\13\6\1\110"+
    "\3\6\27\0\3\6\4\0\4\6\1\111\15\6\1\112"+
    "\3\6\27\0\3\6\4\0\14\6\1\113\11\6\27\0"+
    "\3\6\4\0\10\6\1\114\3\6\1\115\11\6\27\0"+
    "\3\6\4\0\1\116\3\6\1\117\21\6\27\0\3\6"+
    "\4\0\1\120\2\6\1\121\10\6\1\122\11\6\27\0"+
    "\3\6\4\0\1\123\13\6\1\124\11\6\27\0\3\6"+
    "\4\0\4\6\1\125\6\6\1\126\10\6\1\127\1\6"+
    "\70\0\1\130\65\0\1\131\63\0\1\132\61\0\1\133"+
    "\63\0\1\134\1\135\1\136\73\0\1\137\64\0\1\140"+
    "\64\0\1\141\64\0\1\142\2\0\1\60\1\0\60\60"+
    "\22\0\1\143\41\0\1\144\1\145\10\146\1\147\53\146"+
    "\3\0\3\6\4\0\2\6\1\150\23\6\27\0\3\6"+
    "\4\0\2\6\1\151\23\6\27\0\3\6\4\0\4\6"+
    "\1\152\21\6\27\0\3\6\4\0\5\6\1\153\20\6"+
    "\27\0\3\6\4\0\13\6\1\154\12\6\27\0\3\6"+
    "\4\0\16\6\1\155\7\6\27\0\3\6\4\0\14\6"+
    "\1\156\11\6\27\0\3\6\4\0\13\6\1\157\12\6"+
    "\27\0\3\6\4\0\13\6\1\160\12\6\27\0\3\6"+
    "\4\0\1\161\10\6\1\162\6\6\1\163\1\6\1\164"+
    "\3\6\27\0\3\6\4\0\6\6\1\165\17\6\27\0"+
    "\3\6\4\0\11\6\1\166\14\6\27\0\3\6\4\0"+
    "\5\6\1\167\20\6\27\0\3\6\4\0\11\6\1\170"+
    "\1\6\1\171\4\6\1\172\5\6\27\0\3\6\4\0"+
    "\2\6\1\173\23\6\27\0\3\6\4\0\3\6\1\174"+
    "\3\6\1\175\16\6\27\0\3\6\4\0\21\6\1\176"+
    "\4\6\27\0\3\6\4\0\10\6\1\177\15\6\27\0"+
    "\3\6\4\0\11\6\1\200\11\6\1\201\2\6\27\0"+
    "\3\6\4\0\1\202\25\6\27\0\3\6\4\0\11\6"+
    "\1\203\14\6\27\0\3\6\4\0\16\6\1\204\7\6"+
    "\27\0\3\6\4\0\4\6\1\205\21\6\27\0\3\6"+
    "\4\0\10\6\1\206\3\6\1\207\11\6\27\0\3\6"+
    "\4\0\17\6\1\210\6\6\27\0\3\6\4\0\6\6"+
    "\1\211\17\6\27\0\3\6\4\0\4\6\1\212\21\6"+
    "\27\0\3\6\4\0\4\6\1\213\21\6\27\0\3\6"+
    "\4\0\13\6\1\214\12\6\27\0\3\6\4\0\13\6"+
    "\1\215\12\6\27\0\3\6\4\0\11\6\1\216\14\6"+
    "\27\0\3\6\4\0\13\6\1\217\12\6\72\0\1\220"+
    "\15\0\10\146\1\221\53\146\10\0\1\147\1\4\55\0"+
    "\3\6\4\0\3\6\1\222\22\6\27\0\3\6\4\0"+
    "\10\6\1\223\15\6\27\0\3\6\4\0\1\224\25\6"+
    "\27\0\3\6\4\0\14\6\1\225\11\6\27\0\3\6"+
    "\4\0\13\6\1\226\12\6\27\0\3\6\4\0\17\6"+
    "\1\227\6\6\27\0\3\6\4\0\11\6\1\230\14\6"+
    "\27\0\3\6\4\0\2\6\1\231\23\6\27\0\3\6"+
    "\4\0\5\6\1\232\11\6\1\233\6\6\27\0\3\6"+
    "\4\0\3\6\1\234\22\6\27\0\3\6\4\0\10\6"+
    "\1\235\15\6\27\0\3\6\4\0\10\6\1\236\15\6"+
    "\27\0\3\6\4\0\2\6\1\237\23\6\27\0\3\6"+
    "\4\0\10\6\1\240\15\6\27\0\3\6\4\0\10\6"+
    "\1\241\15\6\27\0\3\6\4\0\10\6\1\242\15\6"+
    "\27\0\3\6\4\0\10\6\1\243\15\6\27\0\3\6"+
    "\4\0\6\6\1\244\17\6\27\0\3\6\4\0\1\245"+
    "\25\6\27\0\3\6\4\0\17\6\1\246\6\6\27\0"+
    "\3\6\4\0\13\6\1\247\12\6\27\0\3\6\4\0"+
    "\1\250\25\6\27\0\3\6\4\0\5\6\1\251\20\6"+
    "\27\0\3\6\4\0\21\6\1\252\4\6\27\0\3\6"+
    "\4\0\2\6\1\253\23\6\27\0\3\6\4\0\20\6"+
    "\1\254\5\6\27\0\3\6\4\0\1\255\25\6\27\0"+
    "\3\6\4\0\13\6\1\256\12\6\27\0\3\6\4\0"+
    "\5\6\1\257\20\6\27\0\3\6\4\0\11\6\1\260"+
    "\14\6\27\0\3\6\4\0\24\6\1\261\1\6\27\0"+
    "\3\6\4\0\17\6\1\262\6\6\24\0\10\146\1\221"+
    "\1\4\52\146\3\0\3\6\4\0\4\6\1\263\21\6"+
    "\27\0\3\6\4\0\4\6\1\264\21\6\27\0\3\6"+
    "\4\0\7\6\1\265\16\6\27\0\3\6\4\0\15\6"+
    "\1\266\10\6\27\0\3\6\4\0\6\6\1\267\17\6"+
    "\27\0\3\6\4\0\10\6\1\270\15\6\27\0\3\6"+
    "\4\0\2\6\1\271\23\6\27\0\3\6\4\0\4\6"+
    "\1\272\21\6\27\0\3\6\4\0\4\6\1\273\21\6"+
    "\27\0\3\6\4\0\11\6\1\274\14\6\27\0\3\6"+
    "\4\0\21\6\1\275\4\6\27\0\3\6\4\0\4\6"+
    "\1\276\21\6\27\0\3\6\4\0\20\6\1\277\5\6"+
    "\27\0\3\6\4\0\15\6\1\300\10\6\27\0\3\6"+
    "\4\0\13\6\1\301\12\6\27\0\3\6\4\0\10\6"+
    "\1\302\15\6\27\0\3\6\4\0\11\6\1\303\14\6"+
    "\27\0\3\6\4\0\17\6\1\304\6\6\27\0\3\6"+
    "\4\0\1\305\25\6\27\0\3\6\4\0\10\6\1\306"+
    "\15\6\27\0\3\6\4\0\10\6\1\307\15\6\27\0"+
    "\3\6\4\0\5\6\1\310\20\6\27\0\3\6\4\0"+
    "\11\6\1\311\14\6\27\0\3\6\4\0\2\6\1\312"+
    "\23\6\27\0\3\6\4\0\6\6\1\313\17\6\27\0"+
    "\3\6\4\0\6\6\1\314\17\6\27\0\3\6\4\0"+
    "\2\6\1\315\23\6\27\0\3\6\4\0\11\6\1\316"+
    "\14\6\27\0\3\6\4\0\13\6\1\317\12\6\27\0"+
    "\3\6\4\0\10\6\1\320\15\6\27\0\3\6\4\0"+
    "\20\6\1\321\5\6\27\0\3\6\4\0\13\6\1\322"+
    "\12\6\27\0\3\6\4\0\17\6\1\323\6\6\27\0"+
    "\3\6\4\0\6\6\1\324\17\6\27\0\3\6\4\0"+
    "\2\6\1\325\23\6\27\0\3\6\4\0\2\6\1\326"+
    "\23\6\27\0\3\6\4\0\1\327\25\6\27\0\3\6"+
    "\4\0\13\6\1\330\12\6\27\0\3\6\4\0\1\331"+
    "\25\6\27\0\3\6\4\0\11\6\1\332\14\6\27\0"+
    "\3\6\4\0\1\333\25\6\27\0\3\6\4\0\14\6"+
    "\1\334\11\6\27\0\3\6\4\0\11\6\1\335\14\6"+
    "\27\0\3\6\4\0\17\6\1\336\6\6\27\0\3\6"+
    "\4\0\14\6\1\337\11\6\27\0\3\6\4\0\6\6"+
    "\1\340\17\6\27\0\3\6\4\0\10\6\1\341\15\6"+
    "\27\0\3\6\4\0\11\6\1\342\14\6\27\0\3\6"+
    "\4\0\6\6\1\343\17\6\27\0\3\6\4\0\6\6"+
    "\1\344\17\6\27\0\3\6\4\0\11\6\1\345\14\6"+
    "\27\0\3\6\4\0\4\6\1\346\21\6\27\0\3\6"+
    "\4\0\10\6\1\347\15\6\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8164];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\2\11\3\1\1\11\2\1\2\11\20\1\2\11"+
    "\1\1\1\11\4\1\6\11\4\1\1\11\1\1\1\11"+
    "\2\1\1\0\43\1\5\11\1\0\10\11\2\0\50\1"+
    "\1\11\1\0\126\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[231];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
/*   VERBATIM    */
  StringBuffer string = new StringBuffer();
  
  private WhySymbol symbol(int type) {
    return new WhySymbol(type, yyline+1, yycolumn+1);
  }

  private WhySymbol symbol(int type, Object value) {
    return new WhySymbol(type, yyline+1, yycolumn+1, value);
  }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public whyLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public whyLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 130) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 30: 
          { return symbol(sym.FLOAT_LITERAL, yytext());
          }
        case 95: break;
        case 27: 
          { yybegin(STRING); string.setLength(0);
          }
        case 96: break;
        case 71: 
          { return symbol(sym.VOID);
          }
        case 97: break;
        case 33: 
          { return symbol(sym.IN);
          }
        case 98: break;
        case 1: 
          { throw new RuntimeException("Illegal character \""+yytext()+"\" at line "+yyline+", column "+yycolumn);
          }
        case 99: break;
        case 35: 
          { return symbol(sym.OR);
          }
        case 100: break;
        case 67: 
          { return symbol(sym.TYPE);
          }
        case 101: break;
        case 73: 
          { return symbol(sym.ARRAY);
          }
        case 102: break;
        case 15: 
          { return symbol(sym.MINUS);
          }
        case 103: break;
        case 79: 
          { return symbol(sym.FALSE);
          }
        case 104: break;
        case 46: 
          { return symbol(sym.AMPAMP);
          }
        case 105: break;
        case 59: 
          { return symbol(sym.FOR);
          }
        case 106: break;
        case 28: 
          { string.append( yytext() );
          }
        case 107: break;
        case 88: 
          { return symbol(sym.VARIANT);
          }
        case 108: break;
        case 12: 
          { return symbol(sym.COLON);
          }
        case 109: break;
        case 51: 
          { return symbol(sym.REC);
          }
        case 110: break;
        case 63: 
          { return symbol(sym.REAL);
          }
        case 111: break;
        case 44: 
          { return symbol(sym.RIGHTBRIGHTB);
          }
        case 112: break;
        case 61: 
          { return symbol(sym.BOOL);
          }
        case 113: break;
        case 40: 
          { return symbol(sym.GE);
          }
        case 114: break;
        case 34: 
          { return symbol(sym.IF);
          }
        case 115: break;
        case 22: 
          { return symbol(sym.LEFTSQ);
          }
        case 116: break;
        case 52: 
          { return symbol(sym.REF);
          }
        case 117: break;
        case 76: 
          { return symbol(sym.RAISE);
          }
        case 118: break;
        case 29: 
          { yybegin(YYINITIAL); return symbol(sym.STRING_LITERAL, string.toString());
          }
        case 119: break;
        case 89: 
          { return symbol(sym.EXTERNAL);
          }
        case 120: break;
        case 9: 
          { return symbol(sym.RIGHTPAR);
          }
        case 121: break;
        case 80: 
          { return symbol(sym.WHILE);
          }
        case 122: break;
        case 49: 
          { string.append('\\');
          }
        case 123: break;
        case 10: 
          { return symbol(sym.COMMA);
          }
        case 124: break;
        case 41: 
          { return symbol(sym.LE);
          }
        case 125: break;
        case 60: 
          { return symbol(sym.LRARROW);
          }
        case 126: break;
        case 8: 
          { return symbol(sym.TIMES);
          }
        case 127: break;
        case 68: 
          { return symbol(sym.THEN);
          }
        case 128: break;
        case 36: 
          { return symbol(sym.OF);
          }
        case 129: break;
        case 87: 
          { return symbol(sym.RETURNS);
          }
        case 130: break;
        case 11: 
          { return symbol(sym.BANG);
          }
        case 131: break;
        case 5: 
          { return symbol(sym.QUOTE);
          }
        case 132: break;
        case 74: 
          { return symbol(sym.AXIOM);
          }
        case 133: break;
        case 62: 
          { return symbol(sym.UNIT);
          }
        case 134: break;
        case 45: 
          { return symbol(sym.BARBAR);
          }
        case 135: break;
        case 23: 
          { return symbol(sym.RIGHTSQ);
          }
        case 136: break;
        case 85: 
          { return symbol(sym.FORALL);
          }
        case 137: break;
        case 86: 
          { return symbol(sym.WRITES);
          }
        case 138: break;
        case 39: 
          { return symbol(sym.ARROW);
          }
        case 139: break;
        case 18: 
          { return symbol(sym.PLUS);
          }
        case 140: break;
        case 75: 
          { return symbol(sym.BEGIN);
          }
        case 141: break;
        case 54: 
          { return symbol(sym.END);
          }
        case 142: break;
        case 72: 
          { return symbol(sym.WITH);
          }
        case 143: break;
        case 37: 
          { return symbol(sym.COLONEQUAL);
          }
        case 144: break;
        case 20: 
          { return symbol(sym.PERCENT);
          }
        case 145: break;
        case 66: 
          { return symbol(sym.TRUE);
          }
        case 146: break;
        case 77: 
          { return symbol(sym.READS);
          }
        case 147: break;
        case 57: 
          { return symbol(sym.LET);
          }
        case 148: break;
        case 84: 
          { return symbol(sym.EXISTS);
          }
        case 149: break;
        case 83: 
          { return symbol(sym.RAISES);
          }
        case 150: break;
        case 21: 
          { return symbol(sym.AT);
          }
        case 151: break;
        case 24: 
          { return symbol(sym.LEFTB);
          }
        case 152: break;
        case 90: 
          { return symbol(sym.FUNCTION);
          }
        case 153: break;
        case 81: 
          { return symbol(sym.ABSURD);
          }
        case 154: break;
        case 31: 
          { return symbol(sym.AS);
          }
        case 155: break;
        case 94: 
          { return symbol(sym.PREDICATE);
          }
        case 156: break;
        case 42: 
          { return symbol(sym.NOTEQ);
          }
        case 157: break;
        case 25: 
          { return symbol(sym.RIGHTB);
          }
        case 158: break;
        case 78: 
          { return symbol(sym.LOGIC);
          }
        case 159: break;
        case 38: 
          { return symbol(sym.BIGARROW);
          }
        case 160: break;
        case 53: 
          { return symbol(sym.NOT);
          }
        case 161: break;
        case 70: 
          { return symbol(sym.PROP);
          }
        case 162: break;
        case 64: 
          { return symbol(sym.DONE);
          }
        case 163: break;
        case 92: 
          { return symbol(sym.INVARIANT);
          }
        case 164: break;
        case 26: 
          { return symbol(sym.BAR);
          }
        case 165: break;
        case 16: 
          { return symbol(sym.GT);
          }
        case 166: break;
        case 93: 
          { return symbol(sym.PARAMETER);
          }
        case 167: break;
        case 50: 
          { return symbol(sym.AND);
          }
        case 168: break;
        case 2: 
          { /* ignore */
          }
        case 169: break;
        case 56: 
          { return symbol(sym.INT);
          }
        case 170: break;
        case 19: 
          { return symbol(sym.SLASH);
          }
        case 171: break;
        case 4: 
          { return symbol(sym.INTEGER_LITERAL, yytext());
          }
        case 172: break;
        case 91: 
          { return symbol(sym.EXCEPTION);
          }
        case 173: break;
        case 69: 
          { return symbol(sym.GOAL);
          }
        case 174: break;
        case 6: 
          { return symbol(sym.DOT);
          }
        case 175: break;
        case 82: 
          { return symbol(sym.ASSERT);
          }
        case 176: break;
        case 32: 
          { return symbol(sym.DO);
          }
        case 177: break;
        case 48: 
          { string.append('\"');
          }
        case 178: break;
        case 47: 
          { string.append('\n');
          }
        case 179: break;
        case 58: 
          { return symbol(sym.FUN);
          }
        case 180: break;
        case 14: 
          { return symbol(sym.EQUAL);
          }
        case 181: break;
        case 13: 
          { return symbol(sym.SEMICOLON);
          }
        case 182: break;
        case 65: 
          { return symbol(sym.ELSE);
          }
        case 183: break;
        case 43: 
          { return symbol(sym.LEFTBLEFTB);
          }
        case 184: break;
        case 17: 
          { return symbol(sym.LT);
          }
        case 185: break;
        case 7: 
          { return symbol(sym.LEFTPAR);
          }
        case 186: break;
        case 55: 
          { return symbol(sym.TRY);
          }
        case 187: break;
        case 3: 
          { return symbol(sym.IDENTIFIER, yytext());
          }
        case 188: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF);
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Converts an int token code into the name of the
   * token by reflection on the cup symbol class/interface sym
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  private String getTokenName(int token) {
    try {
      java.lang.reflect.Field [] classFields = sym.class.getFields();
      for (int i = 0; i < classFields.length; i++) {
        if (classFields[i].getInt(null) == token) {
          return classFields[i].getName();
        }
      }
    } catch (Exception e) {
      e.printStackTrace(System.err);
    }

    return "UNKNOWN TOKEN";
  }

  /**
   * Same as next_token but also prints the token to standard out
   * for debugging.
   *
   * This code was contributed by Karl Meissner <meissnersd@yahoo.com>
   */
  public java_cup.runtime.Symbol debug_next_token() throws java.io.IOException {
    java_cup.runtime.Symbol s = next_token();
    System.out.println( "line:" + (yyline+1) + " col:" + (yycolumn+1) + " --"+ yytext() + "--" + getTokenName(s.sym) + "--");
    return s;
  }

  /**
   * Runs the scanner on input files.
   *
   * This main method is the debugging routine for the scanner.
   * It prints debugging information about each returned token to
   * System.out until the end of file is reached, or an error occured.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java whyLexer <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        whyLexer scanner = null;
        try {
          scanner = new whyLexer( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.debug_next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
