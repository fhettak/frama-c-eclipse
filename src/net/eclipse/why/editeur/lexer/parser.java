
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Fri Mar 07 16:22:07 GMT+01:00 2008
//----------------------------------------------------

package net.eclipse.why.editeur.lexer;

import net.eclipse.why.editeur.lexer.ast.*;

/** CUP v0.10k generated parser.
  * @version Fri Mar 07 16:22:07 GMT+01:00 2008
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\312\000\002\002\004\000\002\003\003\000\002\004" +
    "\003\000\002\004\004\000\002\005\006\000\002\005\010" +
    "\000\002\005\005\000\002\005\004\000\002\005\006\000" +
    "\002\005\007\000\002\005\007\000\002\005\006\000\002" +
    "\005\011\000\002\005\013\000\002\005\006\000\002\005" +
    "\005\000\002\005\006\000\002\005\010\000\002\006\005" +
    "\000\002\006\007\000\002\006\003\000\002\007\004\000" +
    "\002\007\004\000\002\007\003\000\002\007\005\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\004" +
    "\000\002\010\010\000\002\011\012\000\002\011\003\000" +
    "\002\012\006\000\002\012\003\000\002\013\005\000\002" +
    "\014\002\000\002\014\004\000\002\015\002\000\002\015" +
    "\004\000\002\016\002\000\002\016\004\000\002\017\002" +
    "\000\002\017\003\000\002\020\003\000\002\020\005\000" +
    "\002\021\002\000\002\021\003\000\002\022\003\000\002" +
    "\022\005\000\002\022\004\000\002\023\005\000\002\024" +
    "\003\000\002\024\004\000\002\025\002\000\002\025\004" +
    "\000\002\025\003\000\002\026\003\000\002\026\005\000" +
    "\002\027\005\000\002\030\005\000\002\030\003\000\002" +
    "\030\005\000\002\030\003\000\002\031\002\000\002\031" +
    "\003\000\002\032\003\000\002\032\005\000\002\033\002" +
    "\000\002\033\003\000\002\034\003\000\002\034\005\000" +
    "\002\035\005\000\002\035\006\000\002\036\002\000\002" +
    "\036\003\000\002\037\005\000\002\037\005\000\002\037" +
    "\005\000\002\037\005\000\002\037\004\000\002\037\005" +
    "\000\002\037\005\000\002\037\005\000\002\037\005\000" +
    "\002\037\005\000\002\037\005\000\002\037\004\000\002" +
    "\037\003\000\002\037\006\000\002\037\006\000\002\037" +
    "\010\000\002\037\011\000\002\037\010\000\002\037\012" +
    "\000\002\037\003\000\002\037\003\000\002\037\003\000" +
    "\002\037\003\000\002\037\003\000\002\037\005\000\002" +
    "\037\005\000\002\040\002\000\002\040\005\000\002\041" +
    "\003\000\002\041\005\000\002\042\003\000\002\043\003" +
    "\000\002\043\005\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\044\003\000\002" +
    "\044\003\000\002\046\004\000\002\047\003\000\002\047" +
    "\005\000\002\050\003\000\002\050\005\000\002\050\010" +
    "\000\002\050\010\000\002\050\006\000\002\050\010\000" +
    "\002\050\005\000\002\050\010\000\002\050\011\000\002" +
    "\050\007\000\002\050\012\000\002\050\005\000\002\050" +
    "\007\000\002\050\005\000\002\050\010\000\002\050\007" +
    "\000\002\050\004\000\002\050\004\000\002\050\005\000" +
    "\002\050\005\000\002\050\004\000\002\050\005\000\002" +
    "\050\005\000\002\050\005\000\002\050\005\000\002\050" +
    "\005\000\002\050\005\000\002\050\004\000\002\050\005" +
    "\000\002\050\006\000\002\050\006\000\002\050\006\000" +
    "\002\051\003\000\002\051\003\000\002\051\003\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\004\000\002\051\006\000\002\051\005\000\002\051\005" +
    "\000\002\051\005\000\002\052\003\000\002\052\004\000" +
    "\002\053\003\000\002\053\005\000\002\054\005\000\002" +
    "\054\006\000\002\055\002\000\002\055\004\000\002\056" +
    "\002\000\002\056\005\000\002\056\007\000\002\057\002" +
    "\000\002\057\004\000\002\060\012\000\002\061\006\000" +
    "\002\061\002\000\002\062\005\000\002\062\003\000\002" +
    "\063\003\000\002\064\003\000\002\064\004\000\002\065" +
    "\004\000\002\065\007\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\066\003\000\002\067\003\000\002" +
    "\067\004\000\002\067\005\000\002\070\002\000\002\070" +
    "\003\000\002\071\003\000\002\071\005\000\002\072\003" +
    "\000\002\072\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01a6\000\026\011\010\020\005\022\016\027\014\030" +
    "\011\035\013\036\uffb5\042\uffb5\043\004\057\uffb5\001\002" +
    "\000\004\130\023\001\002\000\004\130\023\001\002\000" +
    "\004\002\u019f\001\002\000\004\002\000\001\002\000\004" +
    "\130\023\001\002\000\004\130\023\001\002\000\030\002" +
    "\uffff\011\010\020\005\022\016\027\014\030\011\035\013" +
    "\036\uffb5\042\uffb5\043\004\057\uffb5\001\002\000\006\051" +
    "\337\130\023\001\002\000\004\130\023\001\002\000\010" +
    "\036\017\042\020\057\021\001\002\000\010\036\uffb4\042" +
    "\uffb4\057\uffb4\001\002\000\004\130\023\001\002\000\004" +
    "\130\023\001\002\000\010\066\024\070\026\130\023\001" +
    "\002\000\004\130\023\001\002\000\214\002\uff41\004\uff41" +
    "\006\uff41\010\uff41\011\uff41\012\uff41\014\uff41\015\uff41\016" +
    "\uff41\017\uff41\020\uff41\022\uff41\023\uff41\026\uff41\027\uff41" +
    "\030\uff41\031\uff41\032\uff41\035\uff41\036\uff41\037\uff41\040" +
    "\uff41\042\uff41\043\uff41\045\uff41\046\uff41\047\uff41\052\uff41" +
    "\054\uff41\055\uff41\056\uff41\057\uff41\061\uff41\062\uff41\063" +
    "\uff41\064\uff41\065\uff41\067\uff41\070\uff41\071\uff41\072\uff41" +
    "\073\uff41\074\uff41\076\uff41\100\uff41\101\uff41\102\uff41\103" +
    "\uff41\104\uff41\105\uff41\106\uff41\107\uff41\110\uff41\111\uff41" +
    "\112\uff41\114\uff41\115\uff41\116\uff41\117\uff41\120\uff41\121" +
    "\uff41\122\uff41\123\uff41\124\uff41\125\uff41\126\uff41\130\uff41" +
    "\132\uff41\133\uff41\001\002\000\004\130\023\001\002\000" +
    "\030\002\ufff2\011\ufff2\020\ufff2\022\ufff2\027\ufff2\030\ufff2" +
    "\035\ufff2\036\ufff2\042\ufff2\043\ufff2\057\ufff2\001\002\000" +
    "\004\066\024\001\002\000\004\071\033\001\002\000\006" +
    "\067\031\071\uff8b\001\002\000\004\066\024\001\002\000" +
    "\004\071\uff8a\001\002\000\004\130\023\001\002\000\030" +
    "\002\ufff0\011\ufff0\020\ufff0\022\ufff0\027\ufff0\030\ufff0\035" +
    "\ufff0\036\ufff0\042\ufff0\043\ufff0\057\ufff0\001\002\000\140" +
    "\002\uff8c\006\uff8c\011\uff8c\014\uff8c\015\uff8c\016\uff8c\017" +
    "\uff8c\020\uff8c\022\uff8c\027\uff8c\030\uff8c\032\uff8c\035\uff8c" +
    "\036\uff8c\042\uff8c\043\uff8c\046\uff8c\047\uff8c\052\uff8c\054" +
    "\uff8c\057\uff8c\064\uff8c\065\uff8c\067\uff8c\071\uff8c\074\uff8c" +
    "\076\uff8c\100\uff8c\101\uff8c\102\uff8c\103\uff8c\104\uff8c\105" +
    "\uff8c\106\uff8c\107\uff8c\110\uff8c\111\uff8c\112\uff8c\114\uff8c" +
    "\115\uff8c\116\uff8c\117\uff8c\121\uff8c\123\uff8c\124\uff8c\125" +
    "\uff8c\130\uff8c\001\002\000\030\002\ufff1\011\ufff1\020\ufff1" +
    "\022\ufff1\027\ufff1\030\ufff1\035\ufff1\036\ufff1\042\ufff1\043" +
    "\ufff1\057\ufff1\001\002\000\014\046\uff3b\065\uff3b\067\303" +
    "\073\uff3b\117\uff3b\001\002\000\004\073\041\001\002\000" +
    "\020\013\045\033\042\050\052\060\053\066\024\070\051" +
    "\130\023\001\002\000\140\002\uffe8\006\uffe8\011\uffe8\014" +
    "\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\022\uffe8\027\uffe8" +
    "\030\uffe8\032\uffe8\035\uffe8\036\uffe8\042\uffe8\043\uffe8\046" +
    "\uffe8\047\uffe8\052\uffe8\054\uffe8\057\uffe8\064\uffe8\065\uffe8" +
    "\067\uffe8\071\uffe8\074\uffe8\076\uffe8\100\uffe8\101\uffe8\102" +
    "\uffe8\103\uffe8\104\uffe8\105\uffe8\106\uffe8\107\uffe8\110\uffe8" +
    "\111\uffe8\112\uffe8\114\uffe8\115\uffe8\116\uffe8\117\uffe8\121" +
    "\uffe8\123\uffe8\124\uffe8\125\uffe8\130\uffe8\001\002\000\030" +
    "\002\ufff8\011\ufff8\020\ufff8\022\ufff8\027\ufff8\030\ufff8\035" +
    "\ufff8\036\ufff8\042\ufff8\043\ufff8\057\ufff8\001\002\000\132" +
    "\002\uffea\006\061\011\uffea\014\uffea\015\uffea\016\uffea\017" +
    "\uffea\020\uffea\022\uffea\027\uffea\030\uffea\032\uffea\035\uffea" +
    "\036\uffea\042\uffea\043\uffea\046\uffea\047\uffea\052\057\054" +
    "\uffea\057\uffea\064\uffea\065\uffea\071\uffea\074\uffea\076\uffea" +
    "\100\uffea\101\uffea\102\uffea\103\uffea\104\uffea\105\uffea\106" +
    "\uffea\107\uffea\110\uffea\111\uffea\112\uffea\116\uffea\117\uffea" +
    "\121\uffea\123\uffea\124\uffea\125\uffea\130\023\001\002\000" +
    "\140\002\uffe7\006\uffe7\011\uffe7\014\uffe7\015\uffe7\016\uffe7" +
    "\017\uffe7\020\uffe7\022\uffe7\027\uffe7\030\uffe7\032\uffe7\035" +
    "\uffe7\036\uffe7\042\uffe7\043\uffe7\046\uffe7\047\uffe7\052\uffe7" +
    "\054\uffe7\057\uffe7\064\uffe7\065\uffe7\067\uffe7\071\uffe7\074" +
    "\uffe7\076\uffe7\100\uffe7\101\uffe7\102\uffe7\103\uffe7\104\uffe7" +
    "\105\uffe7\106\uffe7\107\uffe7\110\uffe7\111\uffe7\112\uffe7\114" +
    "\uffe7\115\uffe7\116\uffe7\117\uffe7\121\uffe7\123\uffe7\124\uffe7" +
    "\125\uffe7\130\uffe7\001\002\000\140\002\uffe4\006\uffe4\011" +
    "\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\022\uffe4" +
    "\027\uffe4\030\uffe4\032\uffe4\035\uffe4\036\uffe4\042\uffe4\043" +
    "\uffe4\046\uffe4\047\uffe4\052\uffe4\054\uffe4\057\uffe4\064\uffe4" +
    "\065\uffe4\067\uffe4\071\uffe4\074\uffe4\076\uffe4\100\uffe4\101" +
    "\uffe4\102\uffe4\103\uffe4\104\uffe4\105\uffe4\106\uffe4\107\uffe4" +
    "\110\uffe4\111\uffe4\112\uffe4\114\uffe4\115\uffe4\116\uffe4\117" +
    "\uffe4\121\uffe4\123\uffe4\124\uffe4\125\uffe4\130\uffe4\001\002" +
    "\000\136\002\uffe3\006\uffe3\011\uffe3\014\uffe3\015\uffe3\016" +
    "\uffe3\017\uffe3\020\uffe3\022\uffe3\027\uffe3\030\uffe3\032\uffe3" +
    "\035\uffe3\036\uffe3\042\uffe3\043\uffe3\046\uffe3\047\uffe3\052" +
    "\uffe3\054\uffe3\057\uffe3\064\uffe3\065\uffe3\067\uffe3\071\uffe3" +
    "\073\277\074\uffe3\076\uffe3\100\uffe3\101\uffe3\102\uffe3\103" +
    "\uffe3\104\uffe3\105\uffe3\106\uffe3\107\uffe3\110\uffe3\111\uffe3" +
    "\112\uffe3\116\uffe3\117\uffe3\121\uffe3\123\uffe3\124\uffe3\125" +
    "\uffe3\130\uffe3\001\002\000\124\002\uffed\011\uffed\014\uffed" +
    "\015\uffed\016\uffed\017\uffed\020\uffed\022\uffed\027\uffed\030" +
    "\uffed\032\uffed\035\uffed\036\uffed\042\uffed\043\uffed\046\uffed" +
    "\047\uffed\054\uffed\057\uffed\064\uffed\065\uffed\071\uffed\074" +
    "\uffed\076\074\100\uffed\101\uffed\102\uffed\103\uffed\104\uffed" +
    "\105\uffed\106\uffed\107\uffed\110\uffed\111\uffed\112\uffed\116" +
    "\uffed\117\uffed\121\uffed\123\uffed\124\uffed\125\uffed\001\002" +
    "\000\020\013\045\033\042\050\052\060\053\066\024\070" +
    "\051\130\023\001\002\000\140\002\uffe6\006\uffe6\011\uffe6" +
    "\014\uffe6\015\uffe6\016\uffe6\017\uffe6\020\uffe6\022\uffe6\027" +
    "\uffe6\030\uffe6\032\uffe6\035\uffe6\036\uffe6\042\uffe6\043\uffe6" +
    "\046\uffe6\047\uffe6\052\uffe6\054\uffe6\057\uffe6\064\uffe6\065" +
    "\uffe6\067\uffe6\071\uffe6\074\uffe6\076\uffe6\100\uffe6\101\uffe6" +
    "\102\uffe6\103\uffe6\104\uffe6\105\uffe6\106\uffe6\107\uffe6\110" +
    "\uffe6\111\uffe6\112\uffe6\114\uffe6\115\uffe6\116\uffe6\117\uffe6" +
    "\121\uffe6\123\uffe6\124\uffe6\125\uffe6\130\uffe6\001\002\000" +
    "\140\002\uffe5\006\uffe5\011\uffe5\014\uffe5\015\uffe5\016\uffe5" +
    "\017\uffe5\020\uffe5\022\uffe5\027\uffe5\030\uffe5\032\uffe5\035" +
    "\uffe5\036\uffe5\042\uffe5\043\uffe5\046\uffe5\047\uffe5\052\uffe5" +
    "\054\uffe5\057\uffe5\064\uffe5\065\uffe5\067\uffe5\071\uffe5\074" +
    "\uffe5\076\uffe5\100\uffe5\101\uffe5\102\uffe5\103\uffe5\104\uffe5" +
    "\105\uffe5\106\uffe5\107\uffe5\110\uffe5\111\uffe5\112\uffe5\114" +
    "\uffe5\115\uffe5\116\uffe5\117\uffe5\121\uffe5\123\uffe5\124\uffe5" +
    "\125\uffe5\130\uffe5\001\002\000\004\071\073\001\002\000" +
    "\016\006\061\052\057\067\056\071\uffea\076\uffea\130\023" +
    "\001\002\000\020\013\045\033\042\050\052\060\053\066" +
    "\024\070\064\130\023\001\002\000\124\002\uffeb\011\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\022\uffeb\027" +
    "\uffeb\030\uffeb\032\uffeb\035\uffeb\036\uffeb\042\uffeb\043\uffeb" +
    "\046\uffeb\047\uffeb\054\uffeb\057\uffeb\064\uffeb\065\uffeb\071" +
    "\uffeb\074\uffeb\076\uffeb\100\uffeb\101\uffeb\102\uffeb\103\uffeb" +
    "\104\uffeb\105\uffeb\106\uffeb\107\uffeb\110\uffeb\111\uffeb\112" +
    "\uffeb\116\uffeb\117\uffeb\121\uffeb\123\uffeb\124\uffeb\125\uffeb" +
    "\001\002\000\140\002\uffe2\006\uffe2\011\uffe2\014\uffe2\015" +
    "\uffe2\016\uffe2\017\uffe2\020\uffe2\022\uffe2\027\uffe2\030\uffe2" +
    "\032\uffe2\035\uffe2\036\uffe2\042\uffe2\043\uffe2\046\uffe2\047" +
    "\uffe2\052\uffe2\054\uffe2\057\uffe2\064\uffe2\065\uffe2\067\uffe2" +
    "\071\uffe2\074\uffe2\076\uffe2\100\uffe2\101\uffe2\102\uffe2\103" +
    "\uffe2\104\uffe2\105\uffe2\106\uffe2\107\uffe2\110\uffe2\111\uffe2" +
    "\112\uffe2\114\uffe2\115\uffe2\116\uffe2\117\uffe2\121\uffe2\123" +
    "\uffe2\124\uffe2\125\uffe2\130\uffe2\001\002\000\124\002\uffec" +
    "\011\uffec\014\uffec\015\uffec\016\uffec\017\uffec\020\uffec\022" +
    "\uffec\027\uffec\030\uffec\032\uffec\035\uffec\036\uffec\042\uffec" +
    "\043\uffec\046\uffec\047\uffec\054\uffec\057\uffec\064\uffec\065" +
    "\uffec\071\uffec\074\uffec\076\uffec\100\uffec\101\uffec\102\uffec" +
    "\103\uffec\104\uffec\105\uffec\106\uffec\107\uffec\110\uffec\111" +
    "\uffec\112\uffec\116\uffec\117\uffec\121\uffec\123\uffec\124\uffec" +
    "\125\uffec\001\002\000\012\067\071\071\uffbd\076\uffbd\130" +
    "\023\001\002\000\052\002\uffe3\006\uffe3\011\uffe3\020\uffe3" +
    "\022\uffe3\027\uffe3\030\uffe3\035\uffe3\036\uffe3\042\uffe3\043" +
    "\uffe3\052\uffe3\057\uffe3\067\uffe3\071\uffe3\076\uffe3\100\uffe3" +
    "\114\uffe3\115\uffe3\130\uffe3\001\002\000\020\013\045\033" +
    "\042\050\052\060\053\066\024\070\064\130\023\001\002" +
    "\000\004\071\066\001\002\000\004\130\023\001\002\000" +
    "\140\002\uffe1\006\uffe1\011\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\020\uffe1\022\uffe1\027\uffe1\030\uffe1\032\uffe1\035" +
    "\uffe1\036\uffe1\042\uffe1\043\uffe1\046\uffe1\047\uffe1\052\uffe1" +
    "\054\uffe1\057\uffe1\064\uffe1\065\uffe1\067\uffe1\071\uffe1\074" +
    "\uffe1\076\uffe1\100\uffe1\101\uffe1\102\uffe1\103\uffe1\104\uffe1" +
    "\105\uffe1\106\uffe1\107\uffe1\110\uffe1\111\uffe1\112\uffe1\114" +
    "\uffe1\115\uffe1\116\uffe1\117\uffe1\121\uffe1\123\uffe1\124\uffe1" +
    "\125\uffe1\130\uffe1\001\002\000\006\067\056\130\023\001" +
    "\002\000\020\013\045\033\042\050\052\060\053\066\024" +
    "\070\064\130\023\001\002\000\006\071\uffbc\076\uffbc\001" +
    "\002\000\124\002\uffe9\011\uffe9\014\uffe9\015\uffe9\016\uffe9" +
    "\017\uffe9\020\uffe9\022\uffe9\027\uffe9\030\uffe9\032\uffe9\035" +
    "\uffe9\036\uffe9\042\uffe9\043\uffe9\046\uffe9\047\uffe9\054\uffe9" +
    "\057\uffe9\064\uffe9\065\uffe9\071\uffe9\074\uffe9\076\uffe9\100" +
    "\uffe9\101\uffe9\102\uffe9\103\uffe9\104\uffe9\105\uffe9\106\uffe9" +
    "\107\uffe9\110\uffe9\111\uffe9\112\uffe9\116\uffe9\117\uffe9\121" +
    "\uffe9\123\uffe9\124\uffe9\125\uffe9\001\002\000\022\013\045" +
    "\033\042\050\052\060\053\066\024\070\051\117\077\130" +
    "\023\001\002\000\122\002\uffdf\011\uffdf\014\uffdf\015\uffdf" +
    "\016\uffdf\017\uffdf\020\uffdf\022\uffdf\027\uffdf\030\uffdf\032" +
    "\uffdf\035\uffdf\036\uffdf\042\uffdf\043\uffdf\046\uffdf\047\uffdf" +
    "\054\uffdf\057\uffdf\064\uffdf\065\uffdf\071\uffdf\074\uffdf\100" +
    "\uffdf\101\uffdf\102\uffdf\103\uffdf\104\uffdf\105\uffdf\106\uffdf" +
    "\107\uffdf\110\uffdf\111\uffdf\112\uffdf\116\uffdf\117\uffdf\121" +
    "\uffdf\123\uffdf\124\uffdf\125\uffdf\001\002\000\122\002\uffef" +
    "\011\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\022" +
    "\uffef\027\uffef\030\uffef\032\uffef\035\uffef\036\uffef\042\uffef" +
    "\043\uffef\046\uffef\047\uffef\054\uffef\057\uffef\064\uffef\065" +
    "\uffef\071\uffef\074\uffef\100\uffef\101\uffef\102\uffef\103\uffef" +
    "\104\uffef\105\uffef\106\uffef\107\uffef\110\uffef\111\uffef\112" +
    "\uffef\116\uffef\117\uffef\121\uffef\123\uffef\124\uffef\125\uffef" +
    "\001\002\000\040\021\117\023\116\025\101\031\107\037" +
    "\104\055\106\062\122\070\103\107\115\120\uffd5\127\110" +
    "\130\105\131\100\132\121\133\113\001\002\000\004\073" +
    "\uff38\001\002\000\004\130\023\001\002\000\004\120\221" +
    "\001\002\000\036\021\117\023\116\025\101\031\107\037" +
    "\104\055\106\062\122\070\103\107\115\127\110\130\105" +
    "\131\100\132\121\133\113\001\002\000\036\021\117\023" +
    "\116\025\101\031\107\037\104\055\106\062\122\070\103" +
    "\107\115\127\110\130\105\131\100\132\121\133\113\001" +
    "\002\000\124\002\uff40\005\uff40\007\uff40\011\uff40\016\uff40" +
    "\020\uff40\022\uff40\024\uff40\027\uff40\030\uff40\035\uff40\036" +
    "\uff40\041\uff40\042\uff40\043\uff40\054\uff40\057\uff40\061\uff40" +
    "\067\uff40\070\uff40\071\uff40\073\uff39\076\uff40\077\uff40\100" +
    "\uff40\101\uff40\102\uff40\103\uff40\104\uff40\105\uff40\106\uff40" +
    "\107\uff40\110\uff40\111\uff40\112\uff40\113\214\115\uff40\116" +
    "\uff40\120\uff40\122\uff40\123\uff40\001\002\000\114\002\uff9e" +
    "\005\uff9e\007\uff9e\011\uff9e\016\uff9e\020\uff9e\022\uff9e\024" +
    "\uff9e\027\uff9e\030\uff9e\035\uff9e\036\uff9e\041\uff9e\042\uff9e" +
    "\043\uff9e\054\uff9e\057\uff9e\061\uff9e\067\uff9e\071\uff9e\076" +
    "\uff9e\077\uff9e\100\uff9e\101\uff9e\102\uff9e\103\uff9e\104\uff9e" +
    "\105\uff9e\106\uff9e\107\uff9e\110\uff9e\111\uff9e\112\uff9e\116" +
    "\uff9e\120\uff9e\122\uff9e\123\uff9e\001\002\000\036\021\117" +
    "\023\116\025\101\031\107\037\104\055\106\062\122\070" +
    "\103\107\115\127\110\130\105\131\100\132\121\133\113" +
    "\001\002\000\004\070\200\001\002\000\120\002\uffa7\005" +
    "\uffa7\007\uffa7\011\uffa7\016\uffa7\020\uffa7\022\uffa7\024\uffa7" +
    "\027\uffa7\030\uffa7\035\uffa7\036\uffa7\041\uffa7\042\uffa7\043" +
    "\uffa7\054\uffa7\057\uffa7\061\uffa7\067\uffa7\070\170\071\uffa7" +
    "\076\uffa7\077\uffa7\100\uffa7\101\uffa7\102\uffa7\103\uffa7\104" +
    "\uffa7\105\uffa7\106\uffa7\107\uffa7\110\uffa7\111\uffa7\112\uffa7" +
    "\115\167\116\uffa7\120\uffa7\122\uffa7\123\uffa7\001\002\000" +
    "\004\120\uffd4\001\002\000\114\002\uff9f\005\uff9f\007\uff9f" +
    "\011\uff9f\016\uff9f\020\uff9f\022\uff9f\024\uff9f\027\uff9f\030" +
    "\uff9f\035\uff9f\036\uff9f\041\uff9f\042\uff9f\043\uff9f\054\uff9f" +
    "\057\uff9f\061\uff9f\067\uff9f\071\uff9f\076\uff9f\077\uff9f\100" +
    "\uff9f\101\uff9f\102\uff9f\103\uff9f\104\uff9f\105\uff9f\106\uff9f" +
    "\107\uff9f\110\uff9f\111\uff9f\112\uff9f\116\uff9f\120\uff9f\122" +
    "\uff9f\123\uff9f\001\002\000\004\073\165\001\002\000\036" +
    "\021\117\023\116\025\101\031\107\037\104\055\106\062" +
    "\122\070\103\107\115\127\110\130\105\131\100\132\121" +
    "\133\113\001\002\000\114\002\uff9d\005\uff9d\007\uff9d\011" +
    "\uff9d\016\uff9d\020\uff9d\022\uff9d\024\uff9d\027\uff9d\030\uff9d" +
    "\035\uff9d\036\uff9d\041\uff9d\042\uff9d\043\uff9d\054\uff9d\057" +
    "\uff9d\061\uff9d\067\uff9d\071\uff9d\076\uff9d\077\uff9d\100\uff9d" +
    "\101\uff9d\102\uff9d\103\uff9d\104\uff9d\105\uff9d\106\uff9d\107" +
    "\uff9d\110\uff9d\111\uff9d\112\uff9d\116\uff9d\120\uff9d\122\uff9d" +
    "\123\uff9d\001\002\000\004\130\023\001\002\000\052\005" +
    "\123\007\137\041\143\061\uffd3\076\133\077\141\100\131" +
    "\101\142\102\134\103\136\104\127\105\130\106\132\107" +
    "\124\110\140\111\125\112\126\120\uffd3\122\uffd3\123\uffd3" +
    "\001\002\000\114\002\uffa0\005\uffa0\007\uffa0\011\uffa0\016" +
    "\uffa0\020\uffa0\022\uffa0\024\uffa0\027\uffa0\030\uffa0\035\uffa0" +
    "\036\uffa0\041\uffa0\042\uffa0\043\uffa0\054\uffa0\057\uffa0\061" +
    "\uffa0\067\uffa0\071\uffa0\076\uffa0\077\uffa0\100\uffa0\101\uffa0" +
    "\102\uffa0\103\uffa0\104\uffa0\105\uffa0\106\uffa0\107\uffa0\110" +
    "\uffa0\111\uffa0\112\uffa0\116\uffa0\120\uffa0\122\uffa0\123\uffa0" +
    "\001\002\000\114\002\uff9c\005\uff9c\007\uff9c\011\uff9c\016" +
    "\uff9c\020\uff9c\022\uff9c\024\uff9c\027\uff9c\030\uff9c\035\uff9c" +
    "\036\uff9c\041\uff9c\042\uff9c\043\uff9c\054\uff9c\057\uff9c\061" +
    "\uff9c\067\uff9c\071\uff9c\076\uff9c\077\uff9c\100\uff9c\101\uff9c" +
    "\102\uff9c\103\uff9c\104\uff9c\105\uff9c\106\uff9c\107\uff9c\110" +
    "\uff9c\111\uff9c\112\uff9c\116\uff9c\120\uff9c\122\uff9c\123\uff9c" +
    "\001\002\000\036\021\117\023\116\025\101\031\107\037" +
    "\104\055\106\062\122\070\103\107\115\127\110\130\105" +
    "\131\100\132\121\133\113\001\002\000\036\021\117\023" +
    "\116\025\101\031\107\037\104\055\106\062\122\070\103" +
    "\107\115\127\110\130\105\131\100\132\121\133\113\001" +
    "\002\000\036\021\117\023\116\025\101\031\107\037\104" +
    "\055\106\062\122\070\103\107\115\127\110\130\105\131" +
    "\100\132\121\133\113\001\002\000\036\021\117\023\116" +
    "\025\101\031\107\037\104\055\106\062\122\070\103\107" +
    "\115\127\110\130\105\131\100\132\121\133\113\001\002" +
    "\000\036\021\uff8f\023\uff8f\025\uff8f\031\uff8f\037\uff8f\055" +
    "\uff8f\062\uff8f\070\uff8f\107\uff8f\127\uff8f\130\uff8f\131\uff8f" +
    "\132\uff8f\133\uff8f\001\002\000\036\021\uff8d\023\uff8d\025" +
    "\uff8d\031\uff8d\037\uff8d\055\uff8d\062\uff8d\070\uff8d\107\uff8d" +
    "\127\uff8d\130\uff8d\131\uff8d\132\uff8d\133\uff8d\001\002\000" +
    "\036\021\uff8e\023\uff8e\025\uff8e\031\uff8e\037\uff8e\055\uff8e" +
    "\062\uff8e\070\uff8e\107\uff8e\127\uff8e\130\uff8e\131\uff8e\132" +
    "\uff8e\133\uff8e\001\002\000\036\021\117\023\116\025\101" +
    "\031\107\037\104\055\106\062\122\070\103\107\115\127" +
    "\110\130\105\131\100\132\121\133\113\001\002\000\036" +
    "\021\117\023\116\025\101\031\107\037\104\055\106\062" +
    "\122\070\103\107\115\127\110\130\105\131\100\132\121" +
    "\133\113\001\002\000\036\021\uff91\023\uff91\025\uff91\031" +
    "\uff91\037\uff91\055\uff91\062\uff91\070\uff91\107\uff91\127\uff91" +
    "\130\uff91\131\uff91\132\uff91\133\uff91\001\002\000\036\021" +
    "\117\023\116\025\101\031\107\037\104\055\106\062\122" +
    "\070\103\107\115\127\110\130\105\131\100\132\121\133" +
    "\113\001\002\000\036\021\uff90\023\uff90\025\uff90\031\uff90" +
    "\037\uff90\055\uff90\062\uff90\070\uff90\107\uff90\127\uff90\130" +
    "\uff90\131\uff90\132\uff90\133\uff90\001\002\000\004\130\023" +
    "\001\002\000\036\021\117\023\116\025\101\031\107\037" +
    "\104\055\106\062\122\070\103\107\115\127\110\130\105" +
    "\131\100\132\121\133\113\001\002\000\036\021\117\023" +
    "\116\025\101\031\107\037\104\055\106\062\122\070\103" +
    "\107\115\127\110\130\105\131\100\132\121\133\113\001" +
    "\002\000\036\021\uff92\023\uff92\025\uff92\031\uff92\037\uff92" +
    "\055\uff92\062\uff92\070\uff92\107\uff92\127\uff92\130\uff92\131" +
    "\uff92\132\uff92\133\uff92\001\002\000\036\021\117\023\116" +
    "\025\101\031\107\037\104\055\106\062\122\070\103\107" +
    "\115\127\110\130\105\131\100\132\121\133\113\001\002" +
    "\000\114\002\uffb1\005\123\007\uffb1\011\uffb1\016\uffb1\020" +
    "\uffb1\022\uffb1\024\uffb1\027\uffb1\030\uffb1\035\uffb1\036\uffb1" +
    "\041\143\042\uffb1\043\uffb1\054\uffb1\057\uffb1\061\uffb1\067" +
    "\uffb1\071\uffb1\076\uffb1\077\uffb1\100\131\101\142\102\134" +
    "\103\136\104\127\105\130\106\132\107\124\110\140\111" +
    "\125\112\126\116\uffb1\120\uffb1\122\uffb1\123\uffb1\001\002" +
    "\000\114\002\uffb2\005\123\007\uffb2\011\uffb2\016\uffb2\020" +
    "\uffb2\022\uffb2\024\uffb2\027\uffb2\030\uffb2\035\uffb2\036\uffb2" +
    "\041\143\042\uffb2\043\uffb2\054\uffb2\057\uffb2\061\uffb2\067" +
    "\uffb2\071\uffb2\076\133\077\141\100\131\101\142\102\134" +
    "\103\136\104\127\105\130\106\132\107\124\110\140\111" +
    "\125\112\126\116\uffb2\120\uffb2\122\uffb2\123\uffb2\001\002" +
    "\000\114\002\uffab\005\uffab\007\uffab\011\uffab\016\uffab\020" +
    "\uffab\022\uffab\024\uffab\027\uffab\030\uffab\035\uffab\036\uffab" +
    "\041\uffab\042\uffab\043\uffab\054\uffab\057\uffab\061\uffab\067" +
    "\uffab\071\uffab\076\uffab\077\uffab\100\uffab\101\uffab\102\uffab" +
    "\103\uffab\104\uffab\105\uffab\106\uffab\107\uffab\110\uffab\111" +
    "\uffab\112\uffab\116\uffab\120\uffab\122\uffab\123\uffab\001\002" +
    "\000\012\061\uffd2\120\uffd2\122\uffd2\123\uffd2\001\002\000" +
    "\114\002\uffae\005\uffae\007\uffae\011\uffae\016\uffae\020\uffae" +
    "\022\uffae\024\uffae\027\uffae\030\uffae\035\uffae\036\uffae\041" +
    "\uffae\042\uffae\043\uffae\054\uffae\057\uffae\061\uffae\067\uffae" +
    "\071\uffae\076\uffae\077\uffae\100\131\101\142\102\134\103" +
    "\136\104\127\105\130\106\132\107\124\110\140\111\125" +
    "\112\126\116\uffae\120\uffae\122\uffae\123\uffae\001\002\000" +
    "\114\002\uffb3\005\123\007\uffb3\011\uffb3\016\uffb3\020\uffb3" +
    "\022\uffb3\024\uffb3\027\uffb3\030\uffb3\035\uffb3\036\uffb3\041" +
    "\143\042\uffb3\043\uffb3\054\uffb3\057\uffb3\061\uffb3\067\uffb3" +
    "\071\uffb3\076\133\077\141\100\131\101\142\102\134\103" +
    "\136\104\127\105\130\106\132\107\124\110\140\111\125" +
    "\112\126\116\uffb3\120\uffb3\122\uffb3\123\uffb3\001\002\000" +
    "\114\002\uffad\005\uffad\007\uffad\011\uffad\016\uffad\020\uffad" +
    "\022\uffad\024\uffad\027\uffad\030\uffad\035\uffad\036\uffad\041" +
    "\uffad\042\uffad\043\uffad\054\uffad\057\uffad\061\uffad\067\uffad" +
    "\071\uffad\076\uffad\077\uffad\100\uffad\101\uffad\102\uffad\103" +
    "\uffad\104\uffad\105\uffad\106\uffad\107\uffad\110\140\111\125" +
    "\112\126\116\uffad\120\uffad\122\uffad\123\uffad\001\002\000" +
    "\114\002\uffa9\005\uffa9\007\uffa9\011\uffa9\016\uffa9\020\uffa9" +
    "\022\uffa9\024\uffa9\027\uffa9\030\uffa9\035\uffa9\036\uffa9\041" +
    "\uffa9\042\uffa9\043\uffa9\054\uffa9\057\uffa9\061\uffa9\067\uffa9" +
    "\071\uffa9\076\uffa9\077\uffa9\100\uffa9\101\uffa9\102\uffa9\103" +
    "\uffa9\104\uffa9\105\uffa9\106\uffa9\107\uffa9\110\uffa9\111\uffa9" +
    "\112\uffa9\116\uffa9\120\uffa9\122\uffa9\123\uffa9\001\002\000" +
    "\114\002\uffaa\005\uffaa\007\uffaa\011\uffaa\016\uffaa\020\uffaa" +
    "\022\uffaa\024\uffaa\027\uffaa\030\uffaa\035\uffaa\036\uffaa\041" +
    "\uffaa\042\uffaa\043\uffaa\054\uffaa\057\uffaa\061\uffaa\067\uffaa" +
    "\071\uffaa\076\uffaa\077\uffaa\100\uffaa\101\uffaa\102\uffaa\103" +
    "\uffaa\104\uffaa\105\uffaa\106\uffaa\107\uffaa\110\uffaa\111\uffaa" +
    "\112\uffaa\116\uffaa\120\uffaa\122\uffaa\123\uffaa\001\002\000" +
    "\114\002\uffac\005\uffac\007\uffac\011\uffac\016\uffac\020\uffac" +
    "\022\uffac\024\uffac\027\uffac\030\uffac\035\uffac\036\uffac\041" +
    "\uffac\042\uffac\043\uffac\054\uffac\057\uffac\061\uffac\067\uffac" +
    "\071\uffac\076\uffac\077\uffac\100\uffac\101\uffac\102\uffac\103" +
    "\uffac\104\uffac\105\uffac\106\uffac\107\uffac\110\140\111\125" +
    "\112\126\116\uffac\120\uffac\122\uffac\123\uffac\001\002\000" +
    "\114\002\uffb0\005\123\007\uffb0\011\uffb0\016\uffb0\020\uffb0" +
    "\022\uffb0\024\uffb0\027\uffb0\030\uffb0\035\uffb0\036\uffb0\041" +
    "\uffb0\042\uffb0\043\uffb0\054\uffb0\057\uffb0\061\uffb0\067\uffb0" +
    "\071\uffb0\076\uffb0\077\uffb0\100\131\101\142\102\134\103" +
    "\136\104\127\105\130\106\132\107\124\110\140\111\125" +
    "\112\126\116\uffb0\120\uffb0\122\uffb0\123\uffb0\001\002\000" +
    "\004\073\160\001\002\000\020\013\045\033\042\050\052" +
    "\060\053\066\024\070\064\130\023\001\002\000\006\114" +
    "\162\130\023\001\002\000\036\021\117\023\116\025\101" +
    "\031\107\037\104\055\106\062\122\070\103\107\115\127" +
    "\110\130\105\131\100\132\121\133\113\001\002\000\114" +
    "\002\uffa2\005\123\007\uffa2\011\uffa2\016\uffa2\020\uffa2\022" +
    "\uffa2\024\uffa2\027\uffa2\030\uffa2\035\uffa2\036\uffa2\041\143" +
    "\042\uffa2\043\uffa2\054\uffa2\057\uffa2\061\uffa2\067\uffa2\071" +
    "\uffa2\076\133\077\141\100\131\101\142\102\134\103\136" +
    "\104\127\105\130\106\132\107\124\110\140\111\125\112" +
    "\126\116\uffa2\120\uffa2\122\uffa2\123\uffa2\001\002\000\114" +
    "\002\uffa8\005\uffa8\007\uffa8\011\uffa8\016\uffa8\020\uffa8\022" +
    "\uffa8\024\uffa8\027\uffa8\030\uffa8\035\uffa8\036\uffa8\041\uffa8" +
    "\042\uffa8\043\uffa8\054\uffa8\057\uffa8\061\uffa8\067\uffa8\071" +
    "\uffa8\076\uffa8\077\uffa8\100\uffa8\101\uffa8\102\uffa8\103\uffa8" +
    "\104\uffa8\105\uffa8\106\uffa8\107\uffa8\110\uffa8\111\uffa8\112" +
    "\uffa8\116\uffa8\120\uffa8\122\uffa8\123\uffa8\001\002\000\036" +
    "\021\117\023\116\025\101\031\107\037\104\055\106\062" +
    "\122\070\103\107\115\127\110\130\105\131\100\132\121" +
    "\133\113\001\002\000\114\002\uff9a\005\123\007\uff9a\011" +
    "\uff9a\016\uff9a\020\uff9a\022\uff9a\024\uff9a\027\uff9a\030\uff9a" +
    "\035\uff9a\036\uff9a\041\143\042\uff9a\043\uff9a\054\uff9a\057" +
    "\uff9a\061\uff9a\067\uff9a\071\uff9a\076\133\077\141\100\131" +
    "\101\142\102\134\103\136\104\127\105\130\106\132\107" +
    "\124\110\140\111\125\112\126\116\uff9a\120\uff9a\122\uff9a" +
    "\123\uff9a\001\002\000\036\021\117\023\116\025\101\031" +
    "\107\037\104\055\106\062\122\070\103\107\115\127\110" +
    "\130\105\131\100\132\121\133\113\001\002\000\036\021" +
    "\117\023\116\025\101\031\107\037\104\055\106\062\122" +
    "\070\103\107\115\127\110\130\105\131\100\132\121\133" +
    "\113\001\002\000\050\005\123\041\143\067\174\071\uff94" +
    "\076\133\077\141\100\131\101\142\102\134\103\136\104" +
    "\127\105\130\106\132\107\124\110\140\111\125\112\126" +
    "\116\uff94\123\uff94\001\002\000\004\071\173\001\002\000" +
    "\114\002\uffa6\005\uffa6\007\uffa6\011\uffa6\016\uffa6\020\uffa6" +
    "\022\uffa6\024\uffa6\027\uffa6\030\uffa6\035\uffa6\036\uffa6\041" +
    "\uffa6\042\uffa6\043\uffa6\054\uffa6\057\uffa6\061\uffa6\067\uffa6" +
    "\071\uffa6\076\uffa6\077\uffa6\100\uffa6\101\uffa6\102\uffa6\103" +
    "\uffa6\104\uffa6\105\uffa6\106\uffa6\107\uffa6\110\uffa6\111\uffa6" +
    "\112\uffa6\116\uffa6\120\uffa6\122\uffa6\123\uffa6\001\002\000" +
    "\036\021\117\023\116\025\101\031\107\037\104\055\106" +
    "\062\122\070\103\107\115\127\110\130\105\131\100\132" +
    "\121\133\113\001\002\000\010\071\uff93\116\uff93\123\uff93" +
    "\001\002\000\042\005\123\041\143\076\133\077\141\100" +
    "\131\101\142\102\134\103\136\104\127\105\130\106\132" +
    "\107\124\110\140\111\125\112\126\116\177\001\002\000" +
    "\114\002\uffa5\005\uffa5\007\uffa5\011\uffa5\016\uffa5\020\uffa5" +
    "\022\uffa5\024\uffa5\027\uffa5\030\uffa5\035\uffa5\036\uffa5\041" +
    "\uffa5\042\uffa5\043\uffa5\054\uffa5\057\uffa5\061\uffa5\067\uffa5" +
    "\071\uffa5\076\uffa5\077\uffa5\100\uffa5\101\uffa5\102\uffa5\103" +
    "\uffa5\104\uffa5\105\uffa5\106\uffa5\107\uffa5\110\uffa5\111\uffa5" +
    "\112\uffa5\116\uffa5\120\uffa5\122\uffa5\123\uffa5\001\002\000" +
    "\036\021\117\023\116\025\101\031\107\037\104\055\106" +
    "\062\122\070\103\107\115\127\110\130\105\131\100\132" +
    "\121\133\113\001\002\000\042\005\123\041\143\067\202" +
    "\076\133\077\141\100\131\101\142\102\134\103\136\104" +
    "\127\105\130\106\132\107\124\110\140\111\125\112\126" +
    "\001\002\000\004\133\203\001\002\000\004\067\204\001" +
    "\002\000\004\133\205\001\002\000\004\071\206\001\002" +
    "\000\114\002\uffa1\005\uffa1\007\uffa1\011\uffa1\016\uffa1\020" +
    "\uffa1\022\uffa1\024\uffa1\027\uffa1\030\uffa1\035\uffa1\036\uffa1" +
    "\041\uffa1\042\uffa1\043\uffa1\054\uffa1\057\uffa1\061\uffa1\067" +
    "\uffa1\071\uffa1\076\uffa1\077\uffa1\100\uffa1\101\uffa1\102\uffa1" +
    "\103\uffa1\104\uffa1\105\uffa1\106\uffa1\107\uffa1\110\uffa1\111" +
    "\uffa1\112\uffa1\116\uffa1\120\uffa1\122\uffa1\123\uffa1\001\002" +
    "\000\042\005\123\041\143\054\210\076\133\077\141\100" +
    "\131\101\142\102\134\103\136\104\127\105\130\106\132" +
    "\107\124\110\140\111\125\112\126\001\002\000\036\021" +
    "\117\023\116\025\101\031\107\037\104\055\106\062\122" +
    "\070\103\107\115\127\110\130\105\131\100\132\121\133" +
    "\113\001\002\000\042\005\123\016\212\041\143\076\133" +
    "\077\141\100\131\101\142\102\134\103\136\104\127\105" +
    "\130\106\132\107\124\110\140\111\125\112\126\001\002" +
    "\000\036\021\117\023\116\025\101\031\107\037\104\055" +
    "\106\062\122\070\103\107\115\127\110\130\105\131\100" +
    "\132\121\133\113\001\002\000\114\002\uffa4\005\uffa4\007" +
    "\uffa4\011\uffa4\016\uffa4\020\uffa4\022\uffa4\024\uffa4\027\uffa4" +
    "\030\uffa4\035\uffa4\036\uffa4\041\uffa4\042\uffa4\043\uffa4\054" +
    "\uffa4\057\uffa4\061\uffa4\067\uffa4\071\uffa4\076\uffa4\077\uffa4" +
    "\100\131\101\142\102\134\103\136\104\127\105\130\106" +
    "\132\107\124\110\140\111\125\112\126\116\uffa4\120\uffa4" +
    "\122\uffa4\123\uffa4\001\002\000\122\002\uff3f\005\uff3f\007" +
    "\uff3f\011\uff3f\016\uff3f\020\uff3f\022\uff3f\024\uff3f\027\uff3f" +
    "\030\uff3f\035\uff3f\036\uff3f\041\uff3f\042\uff3f\043\uff3f\054" +
    "\uff3f\057\uff3f\061\uff3f\067\uff3f\070\uff3f\071\uff3f\076\uff3f" +
    "\077\uff3f\100\uff3f\101\uff3f\102\uff3f\103\uff3f\104\uff3f\105" +
    "\uff3f\106\uff3f\107\uff3f\110\uff3f\111\uff3f\112\uff3f\115\uff3f" +
    "\116\uff3f\120\uff3f\122\uff3f\123\uff3f\130\215\001\002\000" +
    "\120\002\uff3e\005\uff3e\007\uff3e\011\uff3e\016\uff3e\020\uff3e" +
    "\022\uff3e\024\uff3e\027\uff3e\030\uff3e\035\uff3e\036\uff3e\041" +
    "\uff3e\042\uff3e\043\uff3e\054\uff3e\057\uff3e\061\uff3e\067\uff3e" +
    "\070\uff3e\071\uff3e\076\uff3e\077\uff3e\100\uff3e\101\uff3e\102" +
    "\uff3e\103\uff3e\104\uff3e\105\uff3e\106\uff3e\107\uff3e\110\uff3e" +
    "\111\uff3e\112\uff3e\115\uff3e\116\uff3e\120\uff3e\122\uff3e\123" +
    "\uff3e\001\002\000\114\002\uffaf\005\uffaf\007\uffaf\011\uffaf" +
    "\016\uffaf\020\uffaf\022\uffaf\024\uffaf\027\uffaf\030\uffaf\035" +
    "\uffaf\036\uffaf\041\uffaf\042\uffaf\043\uffaf\054\uffaf\057\uffaf" +
    "\061\uffaf\067\uffaf\071\uffaf\076\uffaf\077\uffaf\100\131\101" +
    "\142\102\134\103\136\104\127\105\130\106\132\107\124" +
    "\110\140\111\125\112\126\116\uffaf\120\uffaf\122\uffaf\123" +
    "\uffaf\001\002\000\042\005\123\041\143\071\220\076\133" +
    "\077\141\100\131\101\142\102\134\103\136\104\127\105" +
    "\130\106\132\107\124\110\140\111\125\112\126\001\002" +
    "\000\114\002\uff9b\005\uff9b\007\uff9b\011\uff9b\016\uff9b\020" +
    "\uff9b\022\uff9b\024\uff9b\027\uff9b\030\uff9b\035\uff9b\036\uff9b" +
    "\041\uff9b\042\uff9b\043\uff9b\054\uff9b\057\uff9b\061\uff9b\067" +
    "\uff9b\071\uff9b\076\uff9b\077\uff9b\100\uff9b\101\uff9b\102\uff9b" +
    "\103\uff9b\104\uff9b\105\uff9b\106\uff9b\107\uff9b\110\uff9b\111" +
    "\uff9b\112\uff9b\116\uff9b\120\uff9b\122\uff9b\123\uff9b\001\002" +
    "\000\022\013\045\033\042\050\052\053\223\060\053\066" +
    "\024\070\051\130\023\001\002\000\012\046\uffdd\047\uffdd" +
    "\065\uffdd\117\uffdd\001\002\000\004\130\023\001\002\000" +
    "\012\046\uffdb\047\225\065\uffdb\117\uffdb\001\002\000\012" +
    "\046\uff3d\065\uff3d\117\uff3d\130\023\001\002\000\004\117" +
    "\237\001\002\000\010\046\uffd9\065\230\117\uffd9\001\002" +
    "\000\010\046\uff3d\117\uff3d\130\023\001\002\000\006\046" +
    "\232\117\uffd7\001\002\000\006\117\uff3d\130\023\001\002" +
    "\000\004\117\uffdc\001\002\000\004\117\uffd6\001\002\000" +
    "\010\046\uff3c\065\uff3c\117\uff3c\001\002\000\006\046\uffd8" +
    "\117\uffd8\001\002\000\042\021\117\023\116\025\101\031" +
    "\107\037\104\055\106\062\122\070\103\107\115\120\uffd1" +
    "\123\243\127\110\130\105\131\100\132\121\133\113\001" +
    "\002\000\004\120\255\001\002\000\004\120\uffd0\001\002" +
    "\000\010\120\uffcf\122\uffcf\123\253\001\002\000\004\130" +
    "\023\001\002\000\010\120\uffc6\122\uffc6\123\251\001\002" +
    "\000\006\120\uffcd\122\uffcd\001\002\000\004\126\247\001" +
    "\002\000\036\021\117\023\116\025\101\031\107\037\104" +
    "\055\106\062\122\070\103\107\115\127\110\130\105\131" +
    "\100\132\121\133\113\001\002\000\010\120\uffc4\122\uffc4" +
    "\123\uffc4\001\002\000\004\130\023\001\002\000\006\120" +
    "\uffc5\122\uffc5\001\002\000\004\130\023\001\002\000\006" +
    "\120\uffce\122\uffce\001\002\000\122\002\uffe0\011\uffe0\014" +
    "\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\022\uffe0\027\uffe0" +
    "\030\uffe0\032\uffe0\035\uffe0\036\uffe0\042\uffe0\043\uffe0\046" +
    "\uffe0\047\uffe0\054\uffe0\057\uffe0\064\uffe0\065\uffe0\071\uffe0" +
    "\074\uffe0\100\uffe0\101\uffe0\102\uffe0\103\uffe0\104\uffe0\105" +
    "\uffe0\106\uffe0\107\uffe0\110\uffe0\111\uffe0\112\uffe0\116\uffe0" +
    "\117\uffe0\121\uffe0\123\uffe0\124\uffe0\125\uffe0\001\002\000" +
    "\010\046\uffda\065\uffda\117\uffda\001\002\000\004\073\260" +
    "\001\002\000\020\013\045\033\042\050\052\060\053\066" +
    "\024\070\051\130\023\001\002\000\012\046\uffde\047\uffde" +
    "\065\uffde\117\uffde\001\002\000\004\073\263\001\002\000" +
    "\020\013\045\033\042\050\052\060\053\066\024\070\064" +
    "\130\023\001\002\000\010\114\uff99\115\266\130\023\001" +
    "\002\000\004\114\275\001\002\000\036\021\117\023\116" +
    "\025\101\031\107\037\104\055\106\062\122\070\103\107" +
    "\115\127\110\130\105\131\100\132\121\133\113\001\002" +
    "\000\004\116\274\001\002\000\006\116\uff95\123\uff95\001" +
    "\002\000\006\116\uff97\123\272\001\002\000\036\021\117" +
    "\023\116\025\101\031\107\037\104\055\106\062\122\070" +
    "\103\107\115\127\110\130\105\131\100\132\121\133\113" +
    "\001\002\000\004\116\uff96\001\002\000\004\114\uff98\001" +
    "\002\000\036\021\117\023\116\025\101\031\107\037\104" +
    "\055\106\062\122\070\103\107\115\127\110\130\105\131" +
    "\100\132\121\133\113\001\002\000\114\002\uffa3\005\123" +
    "\007\uffa3\011\uffa3\016\uffa3\020\uffa3\022\uffa3\024\uffa3\027" +
    "\uffa3\030\uffa3\035\uffa3\036\uffa3\041\143\042\uffa3\043\uffa3" +
    "\054\uffa3\057\uffa3\061\uffa3\067\uffa3\071\uffa3\076\133\077" +
    "\141\100\131\101\142\102\134\103\136\104\127\105\130" +
    "\106\132\107\124\110\140\111\125\112\126\116\uffa3\120" +
    "\uffa3\122\uffa3\123\uffa3\001\002\000\020\013\045\033\042" +
    "\050\052\060\053\066\024\070\051\130\023\001\002\000" +
    "\004\076\301\001\002\000\022\013\045\033\042\050\052" +
    "\060\053\066\024\070\051\117\077\130\023\001\002\000" +
    "\122\002\uffee\011\uffee\014\uffee\015\uffee\016\uffee\017\uffee" +
    "\020\uffee\022\uffee\027\uffee\030\uffee\032\uffee\035\uffee\036" +
    "\uffee\042\uffee\043\uffee\046\uffee\047\uffee\054\uffee\057\uffee" +
    "\064\uffee\065\uffee\071\uffee\074\uffee\100\uffee\101\uffee\102" +
    "\uffee\103\uffee\104\uffee\105\uffee\106\uffee\107\uffee\110\uffee" +
    "\111\uffee\112\uffee\116\uffee\117\uffee\121\uffee\123\uffee\124" +
    "\uffee\125\uffee\001\002\000\004\130\023\001\002\000\012" +
    "\046\uff3a\065\uff3a\073\uff3a\117\uff3a\001\002\000\004\073" +
    "\306\001\002\000\024\013\045\033\042\044\313\050\052" +
    "\060\053\066\024\070\064\076\uffbf\130\023\001\002\000" +
    "\004\076\314\001\002\000\036\002\uffc0\011\uffc0\020\uffc0" +
    "\022\uffc0\027\uffc0\030\uffc0\035\uffc0\036\uffc0\042\uffc0\043" +
    "\uffc0\057\uffc0\067\071\076\uffbd\130\023\001\002\000\004" +
    "\076\uffbe\001\002\000\030\002\ufff7\011\ufff7\020\ufff7\022" +
    "\ufff7\027\ufff7\030\ufff7\035\ufff7\036\ufff7\042\ufff7\043\ufff7" +
    "\057\ufff7\001\002\000\030\002\uffc2\011\uffc2\020\uffc2\022" +
    "\uffc2\027\uffc2\030\uffc2\035\uffc2\036\uffc2\042\uffc2\043\uffc2" +
    "\057\uffc2\001\002\000\022\013\045\033\042\044\316\050" +
    "\052\060\053\066\024\070\064\130\023\001\002\000\032" +
    "\002\uffc1\011\uffc1\020\uffc1\022\uffc1\027\uffc1\030\uffc1\035" +
    "\uffc1\036\uffc1\042\uffc1\043\uffc1\057\uffc1\130\023\001\002" +
    "\000\030\002\uffc3\011\uffc3\020\uffc3\022\uffc3\027\uffc3\030" +
    "\uffc3\035\uffc3\036\uffc3\042\uffc3\043\uffc3\057\uffc3\001\002" +
    "\000\004\070\320\001\002\000\006\071\uffbb\130\023\001" +
    "\002\000\006\067\335\071\uffb9\001\002\000\004\073\332" +
    "\001\002\000\004\071\325\001\002\000\004\071\uffba\001" +
    "\002\000\004\073\326\001\002\000\020\013\045\033\042" +
    "\050\052\060\053\066\024\070\064\130\023\001\002\000" +
    "\006\100\330\130\023\001\002\000\036\021\117\023\116" +
    "\025\101\031\107\037\104\055\106\062\122\070\103\107" +
    "\115\127\110\130\105\131\100\132\121\133\113\001\002" +
    "\000\066\002\ufff4\005\123\011\ufff4\020\ufff4\022\ufff4\027" +
    "\ufff4\030\ufff4\035\ufff4\036\ufff4\041\143\042\ufff4\043\ufff4" +
    "\057\ufff4\076\133\077\141\100\131\101\142\102\134\103" +
    "\136\104\127\105\130\106\132\107\124\110\140\111\125" +
    "\112\126\001\002\000\020\013\045\033\042\050\052\060" +
    "\053\066\024\070\064\130\023\001\002\000\012\006\334" +
    "\067\uffb7\071\uffb7\130\023\001\002\000\006\067\uffb6\071" +
    "\uffb6\001\002\000\004\130\023\001\002\000\004\071\uffb8" +
    "\001\002\000\004\130\023\001\002\000\006\070\345\100" +
    "\342\001\002\000\010\073\uff4c\076\uff4c\100\uff4c\001\002" +
    "\000\052\004\u0104\010\362\012\373\023\u0100\026\u0106\031" +
    "\370\035\u0101\037\365\045\372\055\367\056\374\062\u0105" +
    "\063\363\070\364\072\u0103\107\377\115\371\130\366\132" +
    "\u0102\133\376\001\002\000\012\070\345\073\uff4b\076\uff4b" +
    "\100\uff4b\001\002\000\004\100\353\001\002\000\006\071" +
    "\346\130\023\001\002\000\012\070\uff49\073\uff49\076\uff49" +
    "\100\uff49\001\002\000\004\073\350\001\002\000\020\013" +
    "\045\033\042\050\052\060\053\066\024\070\051\130\023" +
    "\001\002\000\004\071\352\001\002\000\012\070\uff48\073" +
    "\uff48\076\uff48\100\uff48\001\002\000\054\004\uffc9\010\uffc9" +
    "\012\uffc9\023\uffc9\026\uffc9\031\uffc9\035\uffc9\037\uffc9\045" +
    "\uffc9\055\uffc9\056\uffc9\062\uffc9\063\uffc9\070\uffc9\072\uffc9" +
    "\107\uffc9\115\uffc9\117\355\130\uffc9\132\uffc9\133\uffc9\001" +
    "\002\000\056\004\uffcb\010\uffcb\012\uffcb\023\uffcb\026\uffcb" +
    "\031\uffcb\035\uffcb\037\uffcb\045\uffcb\055\uffcb\056\uffcb\062" +
    "\uffcb\063\uffcb\070\uffcb\072\uffcb\074\uffcb\107\uffcb\115\uffcb" +
    "\117\u0186\130\uffcb\132\uffcb\133\uffcb\001\002\000\040\021" +
    "\117\023\116\025\101\031\107\037\104\055\106\062\122" +
    "\070\103\107\115\120\u0193\127\110\130\105\131\100\132" +
    "\121\133\113\001\002\000\052\004\u0104\010\362\012\373" +
    "\023\u0100\026\u0106\031\370\035\u0101\037\365\045\372\055" +
    "\367\056\374\062\u0105\063\363\070\364\072\u0103\107\377" +
    "\115\371\130\366\132\u0102\133\376\001\002\000\052\004" +
    "\uffc7\010\uffc7\012\uffc7\023\uffc7\026\uffc7\031\uffc7\035\uffc7" +
    "\037\uffc7\045\uffc7\055\uffc7\056\uffc7\062\uffc7\063\uffc7\070" +
    "\uffc7\072\uffc7\107\uffc7\115\uffc7\130\uffc7\132\uffc7\133\uffc7" +
    "\001\002\000\140\002\uff89\011\uff89\012\373\014\uff89\015" +
    "\uff89\016\uff89\017\uff89\020\uff89\022\uff89\023\u0100\027\uff89" +
    "\030\uff89\032\uff89\035\uff89\036\uff89\042\uff89\043\uff89\054" +
    "\uff89\055\367\057\uff89\062\u0105\064\uff89\070\364\071\uff89" +
    "\072\u0103\074\uff89\100\uff89\101\uff89\102\uff89\103\uff89\104" +
    "\uff89\105\uff89\106\uff89\107\uff89\110\uff89\111\uff89\112\uff89" +
    "\115\371\116\uff89\117\uff89\121\uff89\123\uff89\124\uff89\125" +
    "\uff89\130\023\132\u0102\133\376\001\002\000\070\002\ufffc" +
    "\011\ufffc\020\ufffc\022\ufffc\027\ufffc\030\ufffc\035\ufffc\036" +
    "\ufffc\042\ufffc\043\ufffc\057\ufffc\074\u0118\100\u0112\101\u011a" +
    "\102\u0116\103\u0117\104\u0110\105\u0111\106\u0113\107\u010b\110" +
    "\u0119\111\u010c\112\u010f\117\u0115\121\u011b\124\u010e\125\u010d" +
    "\001\002\000\004\117\u0186\001\002\000\052\004\u0104\010" +
    "\362\012\373\023\u0100\026\u0106\031\370\035\u0101\037\365" +
    "\045\372\055\367\056\374\062\u0105\063\363\070\364\072" +
    "\u0103\107\377\115\371\130\366\132\u0102\133\376\001\002" +
    "\000\052\004\u0104\010\362\012\373\023\u0100\026\u0106\031" +
    "\370\035\u0101\037\365\045\372\055\367\056\374\062\u0105" +
    "\063\363\070\364\072\u0103\107\377\115\371\130\366\132" +
    "\u0102\133\376\001\002\000\052\004\u0104\010\362\012\373" +
    "\023\u0100\026\u0106\031\370\035\u0101\037\365\045\372\055" +
    "\367\056\374\062\u0105\063\363\070\364\072\u0103\107\377" +
    "\115\371\130\366\132\u0102\133\376\001\002\000\142\002" +
    "\uff41\011\uff41\012\uff41\014\uff41\015\uff41\017\uff41\020\uff41" +
    "\022\uff41\023\uff41\027\uff41\030\uff41\032\uff41\035\uff41\036" +
    "\uff41\042\uff41\043\uff41\054\uff41\055\uff41\057\uff41\062\uff41" +
    "\064\uff41\070\uff41\071\uff41\072\uff41\073\u0174\074\uff41\075" +
    "\uff41\100\uff41\101\uff41\102\uff41\103\uff41\104\uff41\105\uff41" +
    "\106\uff41\107\uff41\110\uff41\111\uff41\112\uff41\115\uff41\116" +
    "\uff41\117\uff41\121\uff41\123\uff41\124\uff41\125\uff41\130\uff41" +
    "\132\uff41\133\uff41\001\002\000\140\002\uff65\011\uff65\012" +
    "\uff65\014\uff65\015\uff65\016\uff65\017\uff65\020\uff65\022\uff65" +
    "\023\uff65\027\uff65\030\uff65\032\uff65\035\uff65\036\uff65\042" +
    "\uff65\043\uff65\054\uff65\055\uff65\057\uff65\062\uff65\064\uff65" +
    "\070\uff65\071\uff65\072\uff65\074\uff65\100\uff65\101\uff65\102" +
    "\uff65\103\uff65\104\uff65\105\uff65\106\uff65\107\uff65\110\uff65" +
    "\111\uff65\112\uff65\115\uff65\116\uff65\117\uff65\121\uff65\123" +
    "\uff65\124\uff65\125\uff65\130\uff65\132\uff65\133\uff65\001\002" +
    "\000\052\004\u0104\010\362\012\373\023\u0100\026\u0106\031" +
    "\370\035\u0101\037\365\045\372\055\367\056\374\062\u0105" +
    "\063\363\070\364\072\u0103\107\377\115\371\130\366\132" +
    "\u0102\133\376\001\002\000\022\013\045\033\042\050\052" +
    "\060\053\066\024\070\051\117\077\130\023\001\002\000" +
    "\006\070\u0167\130\023\001\002\000\052\004\u0104\010\362" +
    "\012\373\023\u0100\026\u0106\031\370\035\u0101\037\365\045" +
    "\372\055\367\056\374\062\u0105\063\363\070\364\072\u0103" +
    "\107\377\115\371\130\366\132\u0102\133\376\001\002\000" +
    "\052\004\u0104\010\362\012\373\023\u0100\026\u0106\031\370" +
    "\035\u0101\037\365\045\372\055\367\056\374\062\u0105\063" +
    "\363\070\364\072\u0103\107\377\115\371\130\366\132\u0102" +
    "\133\376\001\002\000\140\002\uff69\011\uff69\012\uff69\014" +
    "\uff69\015\uff69\017\uff69\020\uff69\022\uff69\023\uff69\027\uff69" +
    "\030\uff69\032\uff69\035\uff69\036\uff69\042\uff69\043\uff69\054" +
    "\uff69\055\uff69\057\uff69\062\uff69\064\uff69\070\uff69\071\uff69" +
    "\072\uff69\074\uff69\075\u0150\100\uff69\101\uff69\102\uff69\103" +
    "\uff69\104\uff69\105\uff69\106\uff69\107\uff69\110\uff69\111\uff69" +
    "\112\uff69\115\u0151\116\uff69\117\uff69\121\uff69\123\uff69\124" +
    "\uff69\125\uff69\130\uff69\132\uff69\133\uff69\001\002\000\140" +
    "\002\uff67\011\uff67\012\uff67\014\uff67\015\uff67\016\uff67\017" +
    "\uff67\020\uff67\022\uff67\023\uff67\027\uff67\030\uff67\032\uff67" +
    "\035\uff67\036\uff67\042\uff67\043\uff67\054\uff67\055\uff67\057" +
    "\uff67\062\uff67\064\uff67\070\uff67\071\uff67\072\uff67\074\uff67" +
    "\100\uff67\101\uff67\102\uff67\103\uff67\104\uff67\105\uff67\106" +
    "\uff67\107\uff67\110\uff67\111\uff67\112\uff67\115\uff67\116\uff67" +
    "\117\uff67\121\uff67\123\uff67\124\uff67\125\uff67\130\uff67\132" +
    "\uff67\133\uff67\001\002\000\052\004\u0104\010\362\012\373" +
    "\023\u0100\026\u0106\031\370\035\u0101\037\365\045\372\055" +
    "\367\056\374\062\u0105\063\363\070\364\072\u0103\107\377" +
    "\115\371\130\366\132\u0102\133\376\001\002\000\140\002" +
    "\uff64\011\uff64\012\uff64\014\uff64\015\uff64\016\uff64\017\uff64" +
    "\020\uff64\022\uff64\023\uff64\027\uff64\030\uff64\032\uff64\035" +
    "\uff64\036\uff64\042\uff64\043\uff64\054\uff64\055\uff64\057\uff64" +
    "\062\uff64\064\uff64\070\uff64\071\uff64\072\uff64\074\uff64\100" +
    "\uff64\101\uff64\102\uff64\103\uff64\104\uff64\105\uff64\106\uff64" +
    "\107\uff64\110\uff64\111\uff64\112\uff64\115\uff64\116\uff64\117" +
    "\uff64\121\uff64\123\uff64\124\uff64\125\uff64\130\uff64\132\uff64" +
    "\133\uff64\001\002\000\006\051\u012d\130\023\001\002\000" +
    "\140\002\uff68\011\uff68\012\uff68\014\uff68\015\uff68\016\uff68" +
    "\017\uff68\020\uff68\022\uff68\023\uff68\027\uff68\030\uff68\032" +
    "\uff68\035\uff68\036\uff68\042\uff68\043\uff68\054\uff68\055\uff68" +
    "\057\uff68\062\uff68\064\uff68\070\uff68\071\uff68\072\uff68\074" +
    "\uff68\100\uff68\101\uff68\102\uff68\103\uff68\104\uff68\105\uff68" +
    "\106\uff68\107\uff68\110\uff68\111\uff68\112\uff68\115\uff68\116" +
    "\uff68\117\uff68\121\uff68\123\uff68\124\uff68\125\uff68\130\uff68" +
    "\132\uff68\133\uff68\001\002\000\004\130\023\001\002\000" +
    "\116\002\uff58\011\uff58\014\uff58\015\uff58\016\uff58\017\uff58" +
    "\020\uff58\022\uff58\027\uff58\030\uff58\032\uff58\035\uff58\036" +
    "\uff58\042\uff58\043\uff58\054\uff58\057\uff58\064\uff58\071\uff58" +
    "\073\u012a\074\uff58\100\uff58\101\uff58\102\uff58\103\uff58\104" +
    "\uff58\105\uff58\106\uff58\107\uff58\110\uff58\111\uff58\112\uff58" +
    "\116\uff58\117\uff58\121\uff58\123\uff58\124\uff58\125\uff58\001" +
    "\002\000\140\002\uff66\011\uff66\012\uff66\014\uff66\015\uff66" +
    "\016\uff66\017\uff66\020\uff66\022\uff66\023\uff66\027\uff66\030" +
    "\uff66\032\uff66\035\uff66\036\uff66\042\uff66\043\uff66\054\uff66" +
    "\055\uff66\057\uff66\062\uff66\064\uff66\070\uff66\071\uff66\072" +
    "\uff66\074\uff66\100\uff66\101\uff66\102\uff66\103\uff66\104\uff66" +
    "\105\uff66\106\uff66\107\uff66\110\uff66\111\uff66\112\uff66\115" +
    "\uff66\116\uff66\117\uff66\121\uff66\123\uff66\124\uff66\125\uff66" +
    "\130\uff66\132\uff66\133\uff66\001\002\000\004\070\345\001" +
    "\002\000\004\076\u0108\001\002\000\054\004\uffc9\010\uffc9" +
    "\012\uffc9\023\uffc9\026\uffc9\031\uffc9\035\uffc9\037\uffc9\045" +
    "\uffc9\055\uffc9\056\uffc9\062\uffc9\063\uffc9\070\uffc9\072\uffc9" +
    "\107\uffc9\115\uffc9\117\355\130\uffc9\132\uffc9\133\uffc9\001" +
    "\002\000\052\004\u0104\010\362\012\373\023\u0100\026\u0106" +
    "\031\370\035\u0101\037\365\045\372\055\367\056\374\062" +
    "\u0105\063\363\070\364\072\u0103\107\377\115\371\130\366" +
    "\132\u0102\133\376\001\002\000\114\002\uff80\011\uff80\014" +
    "\uff80\015\uff80\016\uff80\017\uff80\020\uff80\022\uff80\027\uff80" +
    "\030\uff80\032\uff80\035\uff80\036\uff80\042\uff80\043\uff80\054" +
    "\uff80\057\uff80\064\uff80\071\uff80\074\u0118\100\u0112\101\u011a" +
    "\102\u0116\103\u0117\104\u0110\105\u0111\106\u0113\107\u010b\110" +
    "\u0119\111\u010c\112\u010f\116\uff80\117\u0115\121\u011b\123\uff80" +
    "\124\u010e\125\u010d\001\002\000\052\004\u0104\010\362\012" +
    "\373\023\u0100\026\u0106\031\370\035\u0101\037\365\045\372" +
    "\055\367\056\374\062\u0105\063\363\070\364\072\u0103\107" +
    "\377\115\371\130\366\132\u0102\133\376\001\002\000\052" +
    "\004\u0104\010\362\012\373\023\u0100\026\u0106\031\370\035" +
    "\u0101\037\365\045\372\055\367\056\374\062\u0105\063\363" +
    "\070\364\072\u0103\107\377\115\371\130\366\132\u0102\133" +
    "\376\001\002\000\052\004\u0104\010\362\012\373\023\u0100" +
    "\026\u0106\031\370\035\u0101\037\365\045\372\055\367\056" +
    "\374\062\u0105\063\363\070\364\072\u0103\107\377\115\371" +
    "\130\366\132\u0102\133\376\001\002\000\052\004\u0104\010" +
    "\362\012\373\023\u0100\026\u0106\031\370\035\u0101\037\365" +
    "\045\372\055\367\056\374\062\u0105\063\363\070\364\072" +
    "\u0103\107\377\115\371\130\366\132\u0102\133\376\001\002" +
    "\000\052\004\u0104\010\362\012\373\023\u0100\026\u0106\031" +
    "\370\035\u0101\037\365\045\372\055\367\056\374\062\u0105" +
    "\063\363\070\364\072\u0103\107\377\115\371\130\366\132" +
    "\u0102\133\376\001\002\000\052\004\uff44\010\uff44\012\uff44" +
    "\023\uff44\026\uff44\031\uff44\035\uff44\037\uff44\045\uff44\055" +
    "\uff44\056\uff44\062\uff44\063\uff44\070\uff44\072\uff44\107\uff44" +
    "\115\uff44\130\uff44\132\uff44\133\uff44\001\002\000\052\004" +
    "\uff42\010\uff42\012\uff42\023\uff42\026\uff42\031\uff42\035\uff42" +
    "\037\uff42\045\uff42\055\uff42\056\uff42\062\uff42\063\uff42\070" +
    "\uff42\072\uff42\107\uff42\115\uff42\130\uff42\132\uff42\133\uff42" +
    "\001\002\000\052\004\uff43\010\uff43\012\uff43\023\uff43\026" +
    "\uff43\031\uff43\035\uff43\037\uff43\045\uff43\055\uff43\056\uff43" +
    "\062\uff43\063\uff43\070\uff43\072\uff43\107\uff43\115\uff43\130" +
    "\uff43\132\uff43\133\uff43\001\002\000\052\004\u0104\010\362" +
    "\012\373\023\u0100\026\u0106\031\370\035\u0101\037\365\045" +
    "\372\055\367\056\374\062\u0105\063\363\070\364\072\u0103" +
    "\107\377\115\371\130\366\132\u0102\133\376\001\002\000" +
    "\052\004\u0104\010\362\012\373\023\u0100\026\u0106\031\370" +
    "\035\u0101\037\365\045\372\055\367\056\374\062\u0105\063" +
    "\363\070\364\072\u0103\107\377\115\371\130\366\132\u0102" +
    "\133\376\001\002\000\040\021\117\023\116\025\101\031" +
    "\107\037\104\055\106\062\122\070\103\107\115\123\243" +
    "\127\110\130\105\131\100\132\121\133\113\001\002\000" +
    "\052\004\uff46\010\uff46\012\uff46\023\uff46\026\uff46\031\uff46" +
    "\035\uff46\037\uff46\045\uff46\055\uff46\056\uff46\062\uff46\063" +
    "\uff46\070\uff46\072\uff46\107\uff46\115\uff46\130\uff46\132\uff46" +
    "\133\uff46\001\002\000\052\004\uff45\010\uff45\012\uff45\023" +
    "\uff45\026\uff45\031\uff45\035\uff45\037\uff45\045\uff45\055\uff45" +
    "\056\uff45\062\uff45\063\uff45\070\uff45\072\uff45\107\uff45\115" +
    "\uff45\130\uff45\132\uff45\133\uff45\001\002\000\052\004\u0104" +
    "\010\362\012\373\023\u0100\026\u0106\031\370\035\u0101\037" +
    "\365\045\372\055\367\056\374\062\u0105\063\363\070\364" +
    "\072\u0103\107\377\115\371\130\366\132\u0102\133\376\001" +
    "\002\000\052\004\u0104\010\362\012\373\023\u0100\026\u0106" +
    "\031\370\035\u0101\037\365\045\372\055\367\056\374\062" +
    "\u0105\063\363\070\364\072\u0103\107\377\115\371\130\366" +
    "\132\u0102\133\376\001\002\000\052\004\uff47\010\uff47\012" +
    "\uff47\023\uff47\026\uff47\031\uff47\035\uff47\037\uff47\045\uff47" +
    "\055\uff47\056\uff47\062\uff47\063\uff47\070\uff47\072\uff47\107" +
    "\uff47\115\uff47\130\uff47\132\uff47\133\uff47\001\002\000\040" +
    "\021\117\023\116\025\101\031\107\037\104\055\106\062" +
    "\122\070\103\107\115\123\243\127\110\130\105\131\100" +
    "\132\121\133\113\001\002\000\004\122\u011d\001\002\000" +
    "\114\002\uff6a\011\uff6a\014\uff6a\015\uff6a\016\uff6a\017\uff6a" +
    "\020\uff6a\022\uff6a\027\uff6a\030\uff6a\032\uff6a\035\uff6a\036" +
    "\uff6a\042\uff6a\043\uff6a\054\uff6a\057\uff6a\064\uff6a\071\uff6a" +
    "\074\uff6a\100\uff6a\101\uff6a\102\uff6a\103\uff6a\104\uff6a\105" +
    "\uff6a\106\uff6a\107\uff6a\110\uff6a\111\uff6a\112\uff6a\116\uff6a" +
    "\117\uff6a\121\uff6a\123\uff6a\124\uff6a\125\uff6a\001\002\000" +
    "\114\002\uff71\011\uff71\014\uff71\015\uff71\016\uff71\017\uff71" +
    "\020\uff71\022\uff71\027\uff71\030\uff71\032\uff71\035\uff71\036" +
    "\uff71\042\uff71\043\uff71\054\uff71\057\uff71\064\uff71\071\uff71" +
    "\074\uff71\100\uff71\101\uff71\102\uff71\103\uff71\104\uff71\105" +
    "\uff71\106\uff71\107\uff71\110\uff71\111\uff71\112\uff71\116\uff71" +
    "\117\uff71\121\uff71\123\uff71\124\uff71\125\uff71\001\002\000" +
    "\114\002\uff6d\011\uff6d\014\uff6d\015\uff6d\016\uff6d\017\uff6d" +
    "\020\uff6d\022\uff6d\027\uff6d\030\uff6d\032\uff6d\035\uff6d\036" +
    "\uff6d\042\uff6d\043\uff6d\054\uff6d\057\uff6d\064\uff6d\071\uff6d" +
    "\074\u0118\100\u0112\101\u011a\102\u0116\103\u0117\104\u0110\105" +
    "\u0111\106\u0113\107\u010b\110\u0119\111\u010c\112\u010f\116\uff6d" +
    "\117\uff6d\121\uff6d\123\uff6d\124\u010e\125\u010d\001\002\000" +
    "\004\120\u0121\001\002\000\114\002\uff6b\011\uff6b\014\uff6b" +
    "\015\uff6b\016\uff6b\017\uff6b\020\uff6b\022\uff6b\027\uff6b\030" +
    "\uff6b\032\uff6b\035\uff6b\036\uff6b\042\uff6b\043\uff6b\054\uff6b" +
    "\057\uff6b\064\uff6b\071\uff6b\074\uff6b\100\uff6b\101\uff6b\102" +
    "\uff6b\103\uff6b\104\uff6b\105\uff6b\106\uff6b\107\uff6b\110\uff6b" +
    "\111\uff6b\112\uff6b\116\uff6b\117\uff6b\121\uff6b\123\uff6b\124" +
    "\uff6b\125\uff6b\001\002\000\114\002\uff74\011\uff74\014\uff74" +
    "\015\uff74\016\uff74\017\uff74\020\uff74\022\uff74\027\uff74\030" +
    "\uff74\032\uff74\035\uff74\036\uff74\042\uff74\043\uff74\054\uff74" +
    "\057\uff74\064\uff74\071\uff74\074\uff74\100\u0112\101\u011a\102" +
    "\u0116\103\u0117\104\u0110\105\u0111\106\u0113\107\u010b\110\u0119" +
    "\111\u010c\112\u010f\116\uff74\117\uff74\121\uff74\123\uff74\124" +
    "\uff74\125\uff74\001\002\000\114\002\uff73\011\uff73\014\uff73" +
    "\015\uff73\016\uff73\017\uff73\020\uff73\022\uff73\027\uff73\030" +
    "\uff73\032\uff73\035\uff73\036\uff73\042\uff73\043\uff73\054\uff73" +
    "\057\uff73\064\uff73\071\uff73\074\uff73\100\uff73\101\uff73\102" +
    "\uff73\103\uff73\104\uff73\105\uff73\106\uff73\107\uff73\110\u0119" +
    "\111\u010c\112\u010f\116\uff73\117\uff73\121\uff73\123\uff73\124" +
    "\uff73\125\uff73\001\002\000\114\002\uff6f\011\uff6f\014\uff6f" +
    "\015\uff6f\016\uff6f\017\uff6f\020\uff6f\022\uff6f\027\uff6f\030" +
    "\uff6f\032\uff6f\035\uff6f\036\uff6f\042\uff6f\043\uff6f\054\uff6f" +
    "\057\uff6f\064\uff6f\071\uff6f\074\uff6f\100\uff6f\101\uff6f\102" +
    "\uff6f\103\uff6f\104\uff6f\105\uff6f\106\uff6f\107\uff6f\110\uff6f" +
    "\111\uff6f\112\uff6f\116\uff6f\117\uff6f\121\uff6f\123\uff6f\124" +
    "\uff6f\125\uff6f\001\002\000\114\002\uff77\011\uff77\014\uff77" +
    "\015\uff77\016\uff77\017\uff77\020\uff77\022\uff77\027\uff77\030" +
    "\uff77\032\uff77\035\uff77\036\uff77\042\uff77\043\uff77\054\uff77" +
    "\057\uff77\064\uff77\071\uff77\074\uff77\100\u0112\101\u011a\102" +
    "\u0116\103\u0117\104\u0110\105\u0111\106\u0113\107\u010b\110\u0119" +
    "\111\u010c\112\u010f\116\uff77\117\uff77\121\uff77\123\uff77\124" +
    "\u010e\125\u010d\001\002\000\114\002\uff76\011\uff76\014\uff76" +
    "\015\uff76\016\uff76\017\uff76\020\uff76\022\uff76\027\uff76\030" +
    "\uff76\032\uff76\035\uff76\036\uff76\042\uff76\043\uff76\054\uff76" +
    "\057\uff76\064\uff76\071\uff76\074\uff76\100\u0112\101\u011a\102" +
    "\u0116\103\u0117\104\u0110\105\u0111\106\u0113\107\u010b\110\u0119" +
    "\111\u010c\112\u010f\116\uff76\117\uff76\121\uff76\123\uff76\124" +
    "\uff76\125\u010d\001\002\000\114\002\uff70\011\uff70\014\uff70" +
    "\015\uff70\016\uff70\017\uff70\020\uff70\022\uff70\027\uff70\030" +
    "\uff70\032\uff70\035\uff70\036\uff70\042\uff70\043\uff70\054\uff70" +
    "\057\uff70\064\uff70\071\uff70\074\uff70\100\uff70\101\uff70\102" +
    "\uff70\103\uff70\104\uff70\105\uff70\106\uff70\107\uff70\110\uff70" +
    "\111\uff70\112\uff70\116\uff70\117\uff70\121\uff70\123\uff70\124" +
    "\uff70\125\uff70\001\002\000\114\002\uff72\011\uff72\014\uff72" +
    "\015\uff72\016\uff72\017\uff72\020\uff72\022\uff72\027\uff72\030" +
    "\uff72\032\uff72\035\uff72\036\uff72\042\uff72\043\uff72\054\uff72" +
    "\057\uff72\064\uff72\071\uff72\074\uff72\100\uff72\101\uff72\102" +
    "\uff72\103\uff72\104\uff72\105\uff72\106\uff72\107\uff72\110\u0119" +
    "\111\u010c\112\u010f\116\uff72\117\uff72\121\uff72\123\uff72\124" +
    "\uff72\125\uff72\001\002\000\114\002\uff79\011\uff79\014\uff79" +
    "\015\uff79\016\uff79\017\uff79\020\uff79\022\uff79\027\uff79\030" +
    "\uff79\032\uff79\035\uff79\036\uff79\042\uff79\043\uff79\054\uff79" +
    "\057\uff79\064\uff79\071\uff79\074\uff79\100\uff79\101\uff79\102" +
    "\uff79\103\uff79\104\uff79\105\uff79\106\uff79\107\uff79\110\uff79" +
    "\111\uff79\112\uff79\116\uff79\117\uff79\121\uff79\123\uff79\124" +
    "\uff79\125\uff79\001\002\000\020\013\045\033\042\050\052" +
    "\060\053\066\024\070\051\130\023\001\002\000\114\002" +
    "\uff57\011\uff57\014\uff57\015\uff57\016\uff57\017\uff57\020\uff57" +
    "\022\uff57\027\uff57\030\uff57\032\uff57\035\uff57\036\uff57\042" +
    "\uff57\043\uff57\054\uff57\057\uff57\064\uff57\071\uff57\074\uff57" +
    "\100\uff57\101\uff57\102\uff57\103\uff57\104\uff57\105\uff57\106" +
    "\uff57\107\uff57\110\uff57\111\uff57\112\uff57\116\uff57\117\uff57" +
    "\121\uff57\123\uff57\124\uff57\125\uff57\001\002\000\140\002" +
    "\uff63\011\uff63\012\uff63\014\uff63\015\uff63\016\uff63\017\uff63" +
    "\020\uff63\022\uff63\023\uff63\027\uff63\030\uff63\032\uff63\035" +
    "\uff63\036\uff63\042\uff63\043\uff63\054\uff63\055\uff63\057\uff63" +
    "\062\uff63\064\uff63\070\uff63\071\uff63\072\uff63\074\uff63\100" +
    "\uff63\101\uff63\102\uff63\103\uff63\104\uff63\105\uff63\106\uff63" +
    "\107\uff63\110\uff63\111\uff63\112\uff63\115\uff63\116\uff63\117" +
    "\uff63\121\uff63\123\uff63\124\uff63\125\uff63\130\uff63\132\uff63" +
    "\133\uff63\001\002\000\004\130\023\001\002\000\006\070" +
    "\345\100\u012f\001\002\000\054\004\u0104\010\362\012\373" +
    "\023\u0100\026\u0106\031\370\035\u0101\037\365\045\372\052" +
    "\u0137\055\367\056\374\062\u0105\063\363\070\364\072\u0103" +
    "\107\377\115\371\130\366\132\u0102\133\376\001\002\000" +
    "\004\100\u0131\001\002\000\054\004\uffc9\010\uffc9\012\uffc9" +
    "\023\uffc9\026\uffc9\031\uffc9\035\uffc9\037\uffc9\045\uffc9\055" +
    "\uffc9\056\uffc9\062\uffc9\063\uffc9\070\uffc9\072\uffc9\107\uffc9" +
    "\115\uffc9\117\355\130\uffc9\132\uffc9\133\uffc9\001\002\000" +
    "\052\004\u0104\010\362\012\373\023\u0100\026\u0106\031\370" +
    "\035\u0101\037\365\045\372\055\367\056\374\062\u0105\063" +
    "\363\070\364\072\u0103\107\377\115\371\130\366\132\u0102" +
    "\133\376\001\002\000\044\032\u0134\074\u0118\100\u0112\101" +
    "\u011a\102\u0116\103\u0117\104\u0110\105\u0111\106\u0113\107\u010b" +
    "\110\u0119\111\u010c\112\u010f\117\u0115\121\u011b\124\u010e\125" +
    "\u010d\001\002\000\052\004\u0104\010\362\012\373\023\u0100" +
    "\026\u0106\031\370\035\u0101\037\365\045\372\055\367\056" +
    "\374\062\u0105\063\363\070\364\072\u0103\107\377\115\371" +
    "\130\366\132\u0102\133\376\001\002\000\114\002\uff7f\011" +
    "\uff7f\014\uff7f\015\uff7f\016\uff7f\017\uff7f\020\uff7f\022\uff7f" +
    "\027\uff7f\030\uff7f\032\uff7f\035\uff7f\036\uff7f\042\uff7f\043" +
    "\uff7f\054\uff7f\057\uff7f\064\uff7f\071\uff7f\074\u0118\100\u0112" +
    "\101\u011a\102\u0116\103\u0117\104\u0110\105\u0111\106\u0113\107" +
    "\u010b\110\u0119\111\u010c\112\u010f\116\uff7f\117\uff7f\121\uff7f" +
    "\123\uff7f\124\u010e\125\u010d\001\002\000\044\032\u013b\074" +
    "\u0118\100\u0112\101\u011a\102\u0116\103\u0117\104\u0110\105\u0111" +
    "\106\u0113\107\u010b\110\u0119\111\u010c\112\u010f\117\u0115\121" +
    "\u011b\124\u010e\125\u010d\001\002\000\052\004\u0104\010\362" +
    "\012\373\023\u0100\026\u0106\031\370\035\u0101\037\365\045" +
    "\372\055\367\056\374\062\u0105\063\363\070\364\072\u0103" +
    "\107\377\115\371\130\366\132\u0102\133\376\001\002\000" +
    "\044\032\u0139\074\u0118\100\u0112\101\u011a\102\u0116\103\u0117" +
    "\104\u0110\105\u0111\106\u0113\107\u010b\110\u0119\111\u010c\112" +
    "\u010f\117\u0115\121\u011b\124\u010e\125\u010d\001\002\000\052" +
    "\004\u0104\010\362\012\373\023\u0100\026\u0106\031\370\035" +
    "\u0101\037\365\045\372\055\367\056\374\062\u0105\063\363" +
    "\070\364\072\u0103\107\377\115\371\130\366\132\u0102\133" +
    "\376\001\002\000\114\002\uff81\011\uff81\014\uff81\015\uff81" +
    "\016\uff81\017\uff81\020\uff81\022\uff81\027\uff81\030\uff81\032" +
    "\uff81\035\uff81\036\uff81\042\uff81\043\uff81\054\uff81\057\uff81" +
    "\064\uff81\071\uff81\074\u0118\100\u0112\101\u011a\102\u0116\103" +
    "\u0117\104\u0110\105\u0111\106\u0113\107\u010b\110\u0119\111\u010c" +
    "\112\u010f\116\uff81\117\uff81\121\uff81\123\uff81\124\u010e\125" +
    "\u010d\001\002\000\052\004\u0104\010\362\012\373\023\u0100" +
    "\026\u0106\031\370\035\u0101\037\365\045\372\055\367\056" +
    "\374\062\u0105\063\363\070\364\072\u0103\107\377\115\371" +
    "\130\366\132\u0102\133\376\001\002\000\114\002\uff82\011" +
    "\uff82\014\uff82\015\uff82\016\uff82\017\uff82\020\uff82\022\uff82" +
    "\027\uff82\030\uff82\032\uff82\035\uff82\036\uff82\042\uff82\043" +
    "\uff82\054\uff82\057\uff82\064\uff82\071\uff82\074\u0118\100\u0112" +
    "\101\u011a\102\u0116\103\u0117\104\u0110\105\u0111\106\u0113\107" +
    "\u010b\110\u0119\111\u010c\112\u010f\116\uff82\117\uff82\121\uff82" +
    "\123\uff82\124\u010e\125\u010d\001\002\000\004\070\345\001" +
    "\002\000\114\002\uff7e\011\uff7e\014\uff7e\015\uff7e\016\uff7e" +
    "\017\uff7e\020\uff7e\022\uff7e\027\uff7e\030\uff7e\032\u013f\035" +
    "\uff7e\036\uff7e\042\uff7e\043\uff7e\054\uff7e\057\uff7e\064\uff7e" +
    "\071\uff7e\074\uff7e\100\uff7e\101\uff7e\102\uff7e\103\uff7e\104" +
    "\uff7e\105\uff7e\106\uff7e\107\uff7e\110\uff7e\111\uff7e\112\uff7e" +
    "\116\uff7e\117\uff7e\121\uff7e\123\uff7e\124\uff7e\125\uff7e\001" +
    "\002\000\052\004\u0104\010\362\012\373\023\u0100\026\u0106" +
    "\031\370\035\u0101\037\365\045\372\055\367\056\374\062" +
    "\u0105\063\363\070\364\072\u0103\107\377\115\371\130\366" +
    "\132\u0102\133\376\001\002\000\114\002\uff7d\011\uff7d\014" +
    "\uff7d\015\uff7d\016\uff7d\017\uff7d\020\uff7d\022\uff7d\027\uff7d" +
    "\030\uff7d\032\uff7d\035\uff7d\036\uff7d\042\uff7d\043\uff7d\054" +
    "\uff7d\057\uff7d\064\uff7d\071\uff7d\074\u0118\100\u0112\101\u011a" +
    "\102\u0116\103\u0117\104\u0110\105\u0111\106\u0113\107\u010b\110" +
    "\u0119\111\u010c\112\u010f\116\uff7d\117\uff7d\121\uff7d\123\uff7d" +
    "\124\u010e\125\u010d\001\002\000\004\073\u0142\001\002\000" +
    "\020\013\045\033\042\050\052\060\053\066\024\070\051" +
    "\130\023\001\002\000\006\100\uff4f\117\u0144\001\002\000" +
    "\004\061\u0149\001\002\000\004\100\u0146\001\002\000\054" +
    "\004\uffc9\010\uffc9\012\uffc9\023\uffc9\026\uffc9\031\uffc9\035" +
    "\uffc9\037\uffc9\045\uffc9\055\uffc9\056\uffc9\062\uffc9\063\uffc9" +
    "\070\uffc9\072\uffc9\107\uffc9\115\uffc9\117\355\130\uffc9\132" +
    "\uffc9\133\uffc9\001\002\000\052\004\u0104\010\362\012\373" +
    "\023\u0100\026\u0106\031\370\035\u0101\037\365\045\372\055" +
    "\367\056\374\062\u0105\063\363\070\364\072\u0103\107\377" +
    "\115\371\130\366\132\u0102\133\376\001\002\000\114\002" +
    "\uff51\011\uff51\014\uff51\015\uff51\016\uff51\017\uff51\020\uff51" +
    "\022\uff51\027\uff51\030\uff51\032\uff51\035\uff51\036\uff51\042" +
    "\uff51\043\uff51\054\uff51\057\uff51\064\uff51\071\uff51\074\u0118" +
    "\100\u0112\101\u011a\102\u0116\103\u0117\104\u0110\105\u0111\106" +
    "\u0113\107\u010b\110\u0119\111\u010c\112\u010f\116\uff51\117\u0115" +
    "\121\u011b\123\uff51\124\u010e\125\u010d\001\002\000\036\021" +
    "\117\023\116\025\101\031\107\037\104\055\106\062\122" +
    "\070\103\107\115\127\110\130\105\131\100\132\121\133" +
    "\113\001\002\000\004\120\u014e\001\002\000\044\005\123" +
    "\024\u014c\041\143\076\133\077\141\100\131\101\142\102" +
    "\134\103\136\104\127\105\130\106\132\107\124\110\140" +
    "\111\125\112\126\120\uff4d\001\002\000\004\130\023\001" +
    "\002\000\004\120\uff4e\001\002\000\004\100\uff50\001\002" +
    "\000\114\002\uff6e\011\uff6e\014\uff6e\015\uff6e\016\uff6e\017" +
    "\uff6e\020\uff6e\022\uff6e\027\uff6e\030\uff6e\032\uff6e\035\uff6e" +
    "\036\uff6e\042\uff6e\043\uff6e\054\uff6e\057\uff6e\064\uff6e\071" +
    "\uff6e\074\uff6e\100\uff6e\101\uff6e\102\uff6e\103\uff6e\104\uff6e" +
    "\105\uff6e\106\uff6e\107\uff6e\110\uff6e\111\uff6e\112\uff6e\116" +
    "\uff6e\117\uff6e\121\uff6e\123\uff6e\124\uff6e\125\uff6e\001\002" +
    "\000\052\004\u0104\010\362\012\373\023\u0100\026\u0106\031" +
    "\370\035\u0101\037\365\045\372\055\367\056\374\062\u0105" +
    "\063\363\070\364\072\u0103\107\377\115\371\130\366\132" +
    "\u0102\133\376\001\002\000\052\004\u0104\010\362\012\373" +
    "\023\u0100\026\u0106\031\370\035\u0101\037\365\045\372\055" +
    "\367\056\374\062\u0105\063\363\070\364\072\u0103\107\377" +
    "\115\371\130\366\132\u0102\133\376\001\002\000\044\074" +
    "\u0118\100\u0112\101\u011a\102\u0116\103\u0117\104\u0110\105\u0111" +
    "\106\u0113\107\u010b\110\u0119\111\u010c\112\u010f\116\u0153\117" +
    "\u0115\121\u011b\124\u010e\125\u010d\001\002\000\140\002\uff62" +
    "\011\uff62\012\uff62\014\uff62\015\uff62\017\uff62\020\uff62\022" +
    "\uff62\023\uff62\027\uff62\030\uff62\032\uff62\035\uff62\036\uff62" +
    "\042\uff62\043\uff62\054\uff62\055\uff62\057\uff62\062\uff62\064" +
    "\uff62\070\uff62\071\uff62\072\uff62\074\uff62\075\u0154\100\uff62" +
    "\101\uff62\102\uff62\103\uff62\104\uff62\105\uff62\106\uff62\107" +
    "\uff62\110\uff62\111\uff62\112\uff62\115\uff62\116\uff62\117\uff62" +
    "\121\uff62\123\uff62\124\uff62\125\uff62\130\uff62\132\uff62\133" +
    "\uff62\001\002\000\052\004\u0104\010\362\012\373\023\u0100" +
    "\026\u0106\031\370\035\u0101\037\365\045\372\055\367\056" +
    "\374\062\u0105\063\363\070\364\072\u0103\107\377\115\371" +
    "\130\366\132\u0102\133\376\001\002\000\114\002\uff87\011" +
    "\uff87\014\uff87\015\uff87\016\uff87\017\uff87\020\uff87\022\uff87" +
    "\027\uff87\030\uff87\032\uff87\035\uff87\036\uff87\042\uff87\043" +
    "\uff87\054\uff87\057\uff87\064\uff87\071\uff87\074\uff87\100\u0112" +
    "\101\u011a\102\u0116\103\u0117\104\u0110\105\u0111\106\u0113\107" +
    "\u010b\110\u0119\111\u010c\112\u010f\116\uff87\117\uff87\121\uff87" +
    "\123\uff87\124\u010e\125\u010d\001\002\000\114\002\uff88\011" +
    "\uff88\014\uff88\015\uff88\016\uff88\017\uff88\020\uff88\022\uff88" +
    "\027\uff88\030\uff88\032\uff88\035\uff88\036\uff88\042\uff88\043" +
    "\uff88\054\uff88\057\uff88\064\uff88\071\uff88\074\uff88\100\u0112" +
    "\101\u011a\102\u0116\103\u0117\104\u0110\105\u0111\106\u0113\107" +
    "\u010b\110\u0119\111\u010c\112\u010f\116\uff88\117\uff88\121\uff88" +
    "\123\uff88\124\u010e\125\u010d\001\002\000\044\064\u0158\074" +
    "\u0118\100\u0112\101\u011a\102\u0116\103\u0117\104\u0110\105\u0111" +
    "\106\u0113\107\u010b\110\u0119\111\u010c\112\u010f\117\u0115\121" +
    "\u011b\124\u010e\125\u010d\001\002\000\004\130\023\001\002" +
    "\000\004\017\u0163\001\002\000\006\017\uff5c\123\u0161\001" +
    "\002\000\006\076\u015d\130\023\001\002\000\004\076\u015f" +
    "\001\002\000\052\004\u0104\010\362\012\373\023\u0100\026" +
    "\u0106\031\370\035\u0101\037\365\045\372\055\367\056\374" +
    "\062\u0105\063\363\070\364\072\u0103\107\377\115\371\130" +
    "\366\132\u0102\133\376\001\002\000\046\017\uff5a\074\u0118" +
    "\100\u0112\101\u011a\102\u0116\103\u0117\104\u0110\105\u0111\106" +
    "\u0113\107\u010b\110\u0119\111\u010c\112\u010f\117\u0115\121\u011b" +
    "\123\uff5a\124\u010e\125\u010d\001\002\000\052\004\u0104\010" +
    "\362\012\373\023\u0100\026\u0106\031\370\035\u0101\037\365" +
    "\045\372\055\367\056\374\062\u0105\063\363\070\364\072" +
    "\u0103\107\377\115\371\130\366\132\u0102\133\376\001\002" +
    "\000\046\017\uff59\074\u0118\100\u0112\101\u011a\102\u0116\103" +
    "\u0117\104\u0110\105\u0111\106\u0113\107\u010b\110\u0119\111\u010c" +
    "\112\u010f\117\u0115\121\u011b\123\uff59\124\u010e\125\u010d\001" +
    "\002\000\004\130\023\001\002\000\004\017\uff5b\001\002" +
    "\000\114\002\uff7a\011\uff7a\014\uff7a\015\uff7a\016\uff7a\017" +
    "\uff7a\020\uff7a\022\uff7a\027\uff7a\030\uff7a\032\uff7a\035\uff7a" +
    "\036\uff7a\042\uff7a\043\uff7a\054\uff7a\057\uff7a\064\uff7a\071" +
    "\uff7a\074\uff7a\100\uff7a\101\uff7a\102\uff7a\103\uff7a\104\uff7a" +
    "\105\uff7a\106\uff7a\107\uff7a\110\uff7a\111\uff7a\112\uff7a\116" +
    "\uff7a\117\uff7a\121\uff7a\123\uff7a\124\uff7a\125\uff7a\001\002" +
    "\000\044\017\u0165\074\u0118\100\u0112\101\u011a\102\u0116\103" +
    "\u0117\104\u0110\105\u0111\106\u0113\107\u010b\110\u0119\111\u010c" +
    "\112\u010f\117\u0115\121\u011b\124\u010e\125\u010d\001\002\000" +
    "\140\002\uff5f\011\uff5f\012\uff5f\014\uff5f\015\uff5f\016\uff5f" +
    "\017\uff5f\020\uff5f\022\uff5f\023\uff5f\027\uff5f\030\uff5f\032" +
    "\uff5f\035\uff5f\036\uff5f\042\uff5f\043\uff5f\054\uff5f\055\uff5f" +
    "\057\uff5f\062\uff5f\064\uff5f\070\uff5f\071\uff5f\072\uff5f\074" +
    "\uff5f\100\uff5f\101\uff5f\102\uff5f\103\uff5f\104\uff5f\105\uff5f" +
    "\106\uff5f\107\uff5f\110\uff5f\111\uff5f\112\uff5f\115\uff5f\116" +
    "\uff5f\117\uff5f\121\uff5f\123\uff5f\124\uff5f\125\uff5f\130\uff5f" +
    "\132\uff5f\133\uff5f\001\002\000\116\002\uff58\011\uff58\014" +
    "\uff58\015\uff58\016\uff58\017\uff58\020\uff58\022\uff58\027\uff58" +
    "\030\uff58\032\uff58\035\uff58\036\uff58\042\uff58\043\uff58\054" +
    "\uff58\057\uff58\064\uff58\071\uff58\073\u012a\074\uff58\100\uff58" +
    "\101\uff58\102\uff58\103\uff58\104\uff58\105\uff58\106\uff58\107" +
    "\uff58\110\uff58\111\uff58\112\uff58\116\uff58\117\uff58\121\uff58" +
    "\123\uff58\124\uff58\125\uff58\001\002\000\004\130\023\001" +
    "\002\000\052\004\u0104\010\362\012\373\023\u0100\026\u0106" +
    "\031\370\035\u0101\037\365\045\372\055\367\056\374\062" +
    "\u0105\063\363\070\364\072\u0103\107\377\115\371\130\366" +
    "\132\u0102\133\376\001\002\000\044\071\u016a\074\u0118\100" +
    "\u0112\101\u011a\102\u0116\103\u0117\104\u0110\105\u0111\106\u0113" +
    "\107\u010b\110\u0119\111\u010c\112\u010f\117\u0115\121\u011b\124" +
    "\u010e\125\u010d\001\002\000\116\002\uff58\011\uff58\014\uff58" +
    "\015\uff58\016\uff58\017\uff58\020\uff58\022\uff58\027\uff58\030" +
    "\uff58\032\uff58\035\uff58\036\uff58\042\uff58\043\uff58\054\uff58" +
    "\057\uff58\064\uff58\071\uff58\073\u012a\074\uff58\100\uff58\101" +
    "\uff58\102\uff58\103\uff58\104\uff58\105\uff58\106\uff58\107\uff58" +
    "\110\uff58\111\uff58\112\uff58\116\uff58\117\uff58\121\uff58\123" +
    "\uff58\124\uff58\125\uff58\001\002\000\114\002\uff7b\011\uff7b" +
    "\014\uff7b\015\uff7b\016\uff7b\017\uff7b\020\uff7b\022\uff7b\027" +
    "\uff7b\030\uff7b\032\uff7b\035\uff7b\036\uff7b\042\uff7b\043\uff7b" +
    "\054\uff7b\057\uff7b\064\uff7b\071\uff7b\074\uff7b\100\uff7b\101" +
    "\uff7b\102\uff7b\103\uff7b\104\uff7b\105\uff7b\106\uff7b\107\uff7b" +
    "\110\uff7b\111\uff7b\112\uff7b\116\uff7b\117\uff7b\121\uff7b\123" +
    "\uff7b\124\uff7b\125\uff7b\001\002\000\114\002\uff7c\011\uff7c" +
    "\014\uff7c\015\uff7c\016\uff7c\017\uff7c\020\uff7c\022\uff7c\027" +
    "\uff7c\030\uff7c\032\uff7c\035\uff7c\036\uff7c\042\uff7c\043\uff7c" +
    "\054\uff7c\057\uff7c\064\uff7c\071\uff7c\074\uff7c\100\uff7c\101" +
    "\uff7c\102\uff7c\103\uff7c\104\uff7c\105\uff7c\106\uff7c\107\uff7c" +
    "\110\uff7c\111\uff7c\112\uff7c\116\uff7c\117\uff7c\121\uff7c\123" +
    "\uff7c\124\uff7c\125\uff7c\001\002\000\004\116\u016e\001\002" +
    "\000\140\002\uff61\011\uff61\012\uff61\014\uff61\015\uff61\016" +
    "\uff61\017\uff61\020\uff61\022\uff61\023\uff61\027\uff61\030\uff61" +
    "\032\uff61\035\uff61\036\uff61\042\uff61\043\uff61\054\uff61\055" +
    "\uff61\057\uff61\062\uff61\064\uff61\070\uff61\071\uff61\072\uff61" +
    "\074\uff61\100\uff61\101\uff61\102\uff61\103\uff61\104\uff61\105" +
    "\uff61\106\uff61\107\uff61\110\uff61\111\uff61\112\uff61\115\uff61" +
    "\116\uff61\117\uff61\121\uff61\123\uff61\124\uff61\125\uff61\130" +
    "\uff61\132\uff61\133\uff61\001\002\000\044\054\u0170\074\u0118" +
    "\100\u0112\101\u011a\102\u0116\103\u0117\104\u0110\105\u0111\106" +
    "\u0113\107\u010b\110\u0119\111\u010c\112\u010f\117\u0115\121\u011b" +
    "\124\u010e\125\u010d\001\002\000\052\004\u0104\010\362\012" +
    "\373\023\u0100\026\u0106\031\370\035\u0101\037\365\045\372" +
    "\055\367\056\374\062\u0105\063\363\070\364\072\u0103\107" +
    "\377\115\371\130\366\132\u0102\133\376\001\002\000\114" +
    "\002\uff85\011\uff85\014\uff85\015\uff85\016\u0172\017\uff85\020" +
    "\uff85\022\uff85\027\uff85\030\uff85\032\uff85\035\uff85\036\uff85" +
    "\042\uff85\043\uff85\054\uff85\057\uff85\064\uff85\071\uff85\074" +
    "\uff85\100\u0112\101\u011a\102\u0116\103\u0117\104\u0110\105\u0111" +
    "\106\u0113\107\u010b\110\u0119\111\u010c\112\u010f\116\uff85\117" +
    "\uff85\121\uff85\123\uff85\124\u010e\125\u010d\001\002\000\052" +
    "\004\u0104\010\362\012\373\023\u0100\026\u0106\031\370\035" +
    "\u0101\037\365\045\372\055\367\056\374\062\u0105\063\363" +
    "\070\364\072\u0103\107\377\115\371\130\366\132\u0102\133" +
    "\376\001\002\000\114\002\uff86\011\uff86\014\uff86\015\uff86" +
    "\016\uff86\017\uff86\020\uff86\022\uff86\027\uff86\030\uff86\032" +
    "\uff86\035\uff86\036\uff86\042\uff86\043\uff86\054\uff86\057\uff86" +
    "\064\uff86\071\uff86\074\uff86\100\u0112\101\u011a\102\u0116\103" +
    "\u0117\104\u0110\105\u0111\106\u0113\107\u010b\110\u0119\111\u010c" +
    "\112\u010f\116\uff86\117\uff86\121\uff86\123\uff86\124\u010e\125" +
    "\u010d\001\002\000\052\004\u0104\010\362\012\373\023\u0100" +
    "\026\u0106\031\370\035\u0101\037\365\045\372\055\367\056" +
    "\374\062\u0105\063\363\070\364\072\u0103\107\377\115\371" +
    "\130\366\132\u0102\133\376\001\002\000\114\002\uff83\011" +
    "\uff83\014\uff83\015\uff83\016\uff83\017\uff83\020\uff83\022\uff83" +
    "\027\uff83\030\uff83\032\uff83\035\uff83\036\uff83\042\uff83\043" +
    "\uff83\054\uff83\057\uff83\064\uff83\071\uff83\074\u0118\100\u0112" +
    "\101\u011a\102\u0116\103\u0117\104\u0110\105\u0111\106\u0113\107" +
    "\u010b\110\u0119\111\u010c\112\u010f\116\uff83\117\uff83\121\uff83" +
    "\123\uff83\124\u010e\125\u010d\001\002\000\114\002\uff75\011" +
    "\uff75\014\uff75\015\uff75\016\uff75\017\uff75\020\uff75\022\uff75" +
    "\027\uff75\030\uff75\032\uff75\035\uff75\036\uff75\042\uff75\043" +
    "\uff75\054\uff75\057\uff75\064\uff75\071\uff75\074\uff75\100\u0112" +
    "\101\u011a\102\u0116\103\u0117\104\u0110\105\u0111\106\u0113\107" +
    "\u010b\110\u0119\111\u010c\112\u010f\116\uff75\117\uff75\121\uff75" +
    "\123\uff75\124\uff75\125\uff75\001\002\000\044\071\u0178\074" +
    "\u0118\100\u0112\101\u011a\102\u0116\103\u0117\104\u0110\105\u0111" +
    "\106\u0113\107\u010b\110\u0119\111\u010c\112\u010f\117\u0115\121" +
    "\u011b\124\u010e\125\u010d\001\002\000\140\002\uff60\011\uff60" +
    "\012\uff60\014\uff60\015\uff60\016\uff60\017\uff60\020\uff60\022" +
    "\uff60\023\uff60\027\uff60\030\uff60\032\uff60\035\uff60\036\uff60" +
    "\042\uff60\043\uff60\054\uff60\055\uff60\057\uff60\062\uff60\064" +
    "\uff60\070\uff60\071\uff60\072\uff60\074\uff60\100\uff60\101\uff60" +
    "\102\uff60\103\uff60\104\uff60\105\uff60\106\uff60\107\uff60\110" +
    "\uff60\111\uff60\112\uff60\115\uff60\116\uff60\117\uff60\121\uff60" +
    "\123\uff60\124\uff60\125\uff60\130\uff60\132\uff60\133\uff60\001" +
    "\002\000\044\014\u017a\074\u0118\100\u0112\101\u011a\102\u0116" +
    "\103\u0117\104\u0110\105\u0111\106\u0113\107\u010b\110\u0119\111" +
    "\u010c\112\u010f\117\u0115\121\u011b\124\u010e\125\u010d\001\002" +
    "\000\054\004\uff56\010\uff56\012\uff56\023\uff56\026\uff56\031" +
    "\uff56\035\uff56\037\uff56\045\uff56\055\uff56\056\uff56\062\uff56" +
    "\063\uff56\070\uff56\072\uff56\107\uff56\115\uff56\117\u017c\130" +
    "\uff56\132\uff56\133\uff56\001\002\000\052\004\u0104\010\362" +
    "\012\373\023\u0100\026\u0106\031\370\035\u0101\037\365\045" +
    "\372\055\367\056\374\062\u0105\063\363\070\364\072\u0103" +
    "\107\377\115\371\130\366\132\u0102\133\376\001\002\000" +
    "\010\034\u017d\061\uff53\120\uff53\001\002\000\036\021\117" +
    "\023\116\025\101\031\107\037\104\055\106\062\122\070" +
    "\103\107\115\127\110\130\105\131\100\132\121\133\113" +
    "\001\002\000\006\061\u0180\120\u017f\001\002\000\052\004" +
    "\uff55\010\uff55\012\uff55\023\uff55\026\uff55\031\uff55\035\uff55" +
    "\037\uff55\045\uff55\055\uff55\056\uff55\062\uff55\063\uff55\070" +
    "\uff55\072\uff55\107\uff55\115\uff55\130\uff55\132\uff55\133\uff55" +
    "\001\002\000\036\021\117\023\116\025\101\031\107\037" +
    "\104\055\106\062\122\070\103\107\115\127\110\130\105" +
    "\131\100\132\121\133\113\001\002\000\004\120\u0182\001" +
    "\002\000\052\004\uff54\010\uff54\012\uff54\023\uff54\026\uff54" +
    "\031\uff54\035\uff54\037\uff54\045\uff54\055\uff54\056\uff54\062" +
    "\uff54\063\uff54\070\uff54\072\uff54\107\uff54\115\uff54\130\uff54" +
    "\132\uff54\133\uff54\001\002\000\006\061\uff52\120\uff52\001" +
    "\002\000\044\015\u0185\074\u0118\100\u0112\101\u011a\102\u0116" +
    "\103\u0117\104\u0110\105\u0111\106\u0113\107\u010b\110\u0119\111" +
    "\u010c\112\u010f\117\u0115\121\u011b\124\u010e\125\u010d\001\002" +
    "\000\114\002\uff84\011\uff84\014\uff84\015\uff84\016\uff84\017" +
    "\uff84\020\uff84\022\uff84\027\uff84\030\uff84\032\uff84\035\uff84" +
    "\036\uff84\042\uff84\043\uff84\054\uff84\057\uff84\064\uff84\071" +
    "\uff84\074\uff84\100\uff84\101\uff84\102\uff84\103\uff84\104\uff84" +
    "\105\uff84\106\uff84\107\uff84\110\uff84\111\uff84\112\uff84\116" +
    "\uff84\117\uff84\121\uff84\123\uff84\124\uff84\125\uff84\001\002" +
    "\000\036\021\117\023\116\025\101\031\107\037\104\055" +
    "\106\062\122\070\103\107\115\127\110\130\105\131\100" +
    "\132\121\133\113\001\002\000\004\074\u0188\001\002\000" +
    "\052\004\u0104\010\362\012\373\023\u0100\026\u0106\031\370" +
    "\035\u0101\037\365\045\372\055\367\056\374\062\u0105\063" +
    "\363\070\364\072\u0103\107\377\115\371\130\366\132\u0102" +
    "\133\376\001\002\000\114\002\uff6c\011\uff6c\014\uff6c\015" +
    "\uff6c\016\uff6c\017\uff6c\020\uff6c\022\uff6c\027\uff6c\030\uff6c" +
    "\032\uff6c\035\uff6c\036\uff6c\042\uff6c\043\uff6c\054\uff6c\057" +
    "\uff6c\064\uff6c\071\uff6c\074\u0118\100\u0112\101\u011a\102\u0116" +
    "\103\u0117\104\u0110\105\u0111\106\u0113\107\u010b\110\u0119\111" +
    "\u010c\112\u010f\116\uff6c\117\uff6c\121\uff6c\123\uff6c\124\u010e" +
    "\125\u010d\001\002\000\004\120\u018b\001\002\000\056\004" +
    "\uffcc\010\uffcc\012\uffcc\023\uffcc\026\uffcc\031\uffcc\035\uffcc" +
    "\037\uffcc\045\uffcc\055\uffcc\056\uffcc\062\uffcc\063\uffcc\070" +
    "\uffcc\072\uffcc\074\uffcc\107\uffcc\115\uffcc\117\uffcc\130\uffcc" +
    "\132\uffcc\133\uffcc\001\002\000\140\002\uff69\011\uff69\012" +
    "\uff69\014\uff69\015\uff69\016\uff69\017\uff69\020\uff69\022\uff69" +
    "\023\uff69\027\uff69\030\uff69\032\uff69\035\uff69\036\uff69\042" +
    "\uff69\043\uff69\054\uff69\055\uff69\057\uff69\062\uff69\064\uff69" +
    "\070\uff69\071\uff69\072\uff69\074\uff69\100\uff69\101\uff69\102" +
    "\uff69\103\uff69\104\uff69\105\uff69\106\uff69\107\uff69\110\uff69" +
    "\111\uff69\112\uff69\115\u0190\116\uff69\117\uff69\121\uff69\123" +
    "\uff69\124\uff69\125\uff69\130\uff69\132\uff69\133\uff69\001\002" +
    "\000\140\002\uff5e\011\uff5e\012\373\014\uff5e\015\uff5e\016" +
    "\uff5e\017\uff5e\020\uff5e\022\uff5e\023\u0100\027\uff5e\030\uff5e" +
    "\032\uff5e\035\uff5e\036\uff5e\042\uff5e\043\uff5e\054\uff5e\055" +
    "\367\057\uff5e\062\u0105\064\uff5e\070\364\071\uff5e\072\u0103" +
    "\074\uff5e\100\uff5e\101\uff5e\102\uff5e\103\uff5e\104\uff5e\105" +
    "\uff5e\106\uff5e\107\uff5e\110\uff5e\111\uff5e\112\uff5e\115\371" +
    "\116\uff5e\117\uff5e\121\uff5e\123\uff5e\124\uff5e\125\uff5e\130" +
    "\023\132\u0102\133\376\001\002\000\114\002\uff78\011\uff78" +
    "\014\uff78\015\uff78\016\uff78\017\uff78\020\uff78\022\uff78\027" +
    "\uff78\030\uff78\032\uff78\035\uff78\036\uff78\042\uff78\043\uff78" +
    "\054\uff78\057\uff78\064\uff78\071\uff78\074\uff78\100\uff78\101" +
    "\uff78\102\uff78\103\uff78\104\uff78\105\uff78\106\uff78\107\uff78" +
    "\110\uff78\111\uff78\112\uff78\116\uff78\117\uff78\121\uff78\123" +
    "\uff78\124\uff78\125\uff78\001\002\000\114\002\uff5d\011\uff5d" +
    "\014\uff5d\015\uff5d\016\uff5d\017\uff5d\020\uff5d\022\uff5d\027" +
    "\uff5d\030\uff5d\032\uff5d\035\uff5d\036\uff5d\042\uff5d\043\uff5d" +
    "\054\uff5d\057\uff5d\064\uff5d\071\uff5d\074\uff5d\100\uff5d\101" +
    "\uff5d\102\uff5d\103\uff5d\104\uff5d\105\uff5d\106\uff5d\107\uff5d" +
    "\110\uff5d\111\uff5d\112\uff5d\116\uff5d\117\uff5d\121\uff5d\123" +
    "\uff5d\124\uff5d\125\uff5d\001\002\000\052\004\u0104\010\362" +
    "\012\373\023\u0100\026\u0106\031\370\035\u0101\037\365\045" +
    "\372\055\367\056\374\062\u0105\063\363\070\364\072\u0103" +
    "\107\377\115\371\130\366\132\u0102\133\376\001\002\000" +
    "\044\074\u0118\100\u0112\101\u011a\102\u0116\103\u0117\104\u0110" +
    "\105\u0111\106\u0113\107\u010b\110\u0119\111\u010c\112\u010f\116" +
    "\u0192\117\u0115\121\u011b\124\u010e\125\u010d\001\002\000\140" +
    "\002\uff62\011\uff62\012\uff62\014\uff62\015\uff62\016\uff62\017" +
    "\uff62\020\uff62\022\uff62\023\uff62\027\uff62\030\uff62\032\uff62" +
    "\035\uff62\036\uff62\042\uff62\043\uff62\054\uff62\055\uff62\057" +
    "\uff62\062\uff62\064\uff62\070\uff62\071\uff62\072\uff62\074\uff62" +
    "\100\uff62\101\uff62\102\uff62\103\uff62\104\uff62\105\uff62\106" +
    "\uff62\107\uff62\110\uff62\111\uff62\112\uff62\115\uff62\116\uff62" +
    "\117\uff62\121\uff62\123\uff62\124\uff62\125\uff62\130\uff62\132" +
    "\uff62\133\uff62\001\002\000\052\004\uffc8\010\uffc8\012\uffc8" +
    "\023\uffc8\026\uffc8\031\uffc8\035\uffc8\037\uffc8\045\uffc8\055" +
    "\uffc8\056\uffc8\062\uffc8\063\uffc8\070\uffc8\072\uffc8\107\uffc8" +
    "\115\uffc8\130\uffc8\132\uffc8\133\uffc8\001\002\000\054\004" +
    "\uffca\010\uffca\012\uffca\023\uffca\026\uffca\031\uffca\035\uffca" +
    "\037\uffca\045\uffca\055\uffca\056\uffca\062\uffca\063\uffca\070" +
    "\uffca\072\uffca\074\uffca\107\uffca\115\uffca\130\uffca\132\uffca" +
    "\133\uffca\001\002\000\010\073\uff4a\076\uff4a\100\uff4a\001" +
    "\002\000\070\002\ufffd\011\ufffd\020\ufffd\022\ufffd\027\ufffd" +
    "\030\ufffd\035\ufffd\036\ufffd\042\ufffd\043\ufffd\057\ufffd\074" +
    "\u0118\100\u0112\101\u011a\102\u0116\103\u0117\104\u0110\105\u0111" +
    "\106\u0113\107\u010b\110\u0119\111\u010c\112\u010f\117\u0115\121" +
    "\u011b\124\u010e\125\u010d\001\002\000\030\002\ufffb\011\ufffb" +
    "\020\ufffb\022\ufffb\027\ufffb\030\ufffb\035\ufffb\036\ufffb\042" +
    "\ufffb\043\ufffb\057\ufffb\001\002\000\004\002\ufffe\001\002" +
    "\000\004\073\u019a\001\002\000\036\021\117\023\116\025" +
    "\101\031\107\037\104\055\106\062\122\070\103\107\115" +
    "\127\110\130\105\131\100\132\121\133\113\001\002\000" +
    "\066\002\ufff3\005\123\011\ufff3\020\ufff3\022\ufff3\027\ufff3" +
    "\030\ufff3\035\ufff3\036\ufff3\041\143\042\ufff3\043\ufff3\057" +
    "\ufff3\076\133\077\141\100\131\101\142\102\134\103\136" +
    "\104\127\105\130\106\132\107\124\110\140\111\125\112" +
    "\126\001\002\000\004\073\u019d\001\002\000\036\021\117" +
    "\023\116\025\101\031\107\037\104\055\106\062\122\070" +
    "\103\107\115\127\110\130\105\131\100\132\121\133\113" +
    "\001\002\000\066\002\ufff6\005\123\011\ufff6\020\ufff6\022" +
    "\ufff6\027\ufff6\030\ufff6\035\ufff6\036\ufff6\041\143\042\ufff6" +
    "\043\ufff6\057\ufff6\076\133\077\141\100\131\101\142\102" +
    "\134\103\136\104\127\105\130\106\132\107\124\110\140" +
    "\111\125\112\126\001\002\000\004\002\001\001\002\000" +
    "\032\002\ufffa\011\ufffa\020\ufffa\022\ufffa\027\ufffa\030\ufffa" +
    "\035\ufffa\036\ufffa\040\u01a1\042\ufffa\043\ufffa\057\ufffa\001" +
    "\002\000\020\013\045\033\042\050\052\060\053\066\024" +
    "\070\064\130\023\001\002\000\032\002\ufff9\011\ufff9\020" +
    "\ufff9\022\ufff9\027\ufff9\030\ufff9\035\ufff9\036\ufff9\042\ufff9" +
    "\043\ufff9\057\ufff9\130\023\001\002\000\004\070\u01a4\001" +
    "\002\000\006\071\uffbb\130\023\001\002\000\004\071\u01a6" +
    "\001\002\000\004\100\u01a7\001\002\000\036\021\117\023" +
    "\116\025\101\031\107\037\104\055\106\062\122\070\103" +
    "\107\115\127\110\130\105\131\100\132\121\133\113\001" +
    "\002\000\066\002\ufff5\005\123\011\ufff5\020\ufff5\022\ufff5" +
    "\027\ufff5\030\ufff5\035\ufff5\036\ufff5\041\143\042\ufff5\043" +
    "\ufff5\057\ufff5\076\133\077\141\100\131\101\142\102\134" +
    "\103\136\104\127\105\130\106\132\107\124\110\140\111" +
    "\125\112\126\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01a6\000\012\003\005\004\006\005\011\036\014\001" +
    "\001\000\004\066\u01a2\001\001\000\004\066\u019f\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\066\u019b\001" +
    "\001\000\004\066\u0198\001\001\000\010\004\u0197\005\011" +
    "\036\014\001\001\000\004\066\337\001\001\000\004\066" +
    "\316\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\066\036\071\304\001\001\000\006\066\036\071\037\001" +
    "\001\000\006\046\021\066\024\001\001\000\004\066\035" +
    "\001\001\000\002\001\001\000\004\066\034\001\001\000" +
    "\002\001\001\000\006\046\027\047\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\046\027\047\031\001" +
    "\001\000\002\001\001\000\004\066\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\006\042\007\047\010\043" +
    "\046\045\066\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\066\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\053\007\047\010\054\046\045\066\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\066" +
    "\057\001\001\000\012\010\061\032\064\046\045\066\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\066\057\001\001\000\002\001\001\000\010" +
    "\010\067\046\045\066\062\001\001\000\002\001\001\000" +
    "\004\066\066\001\001\000\002\001\001\000\004\066\057" +
    "\001\001\000\012\010\061\032\071\046\045\066\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\006\074" +
    "\007\047\010\043\011\075\046\045\066\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\017\101\020\111" +
    "\037\117\067\110\072\113\001\001\000\002\001\001\000" +
    "\006\066\036\071\261\001\001\000\002\001\001\000\010" +
    "\037\216\067\110\072\113\001\001\000\010\037\215\067" +
    "\110\072\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\037\206\067\110\072\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\037\163\067\110\072\113\001" +
    "\001\000\002\001\001\000\004\066\156\001\001\000\004" +
    "\044\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\037\155\067\110\072\113\001\001\000\010\037\154" +
    "\067\110\072\113\001\001\000\010\037\153\067\110\072" +
    "\113\001\001\000\010\037\152\067\110\072\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\037\151\067\110\072\113\001\001\000\010\037\150" +
    "\067\110\072\113\001\001\000\002\001\001\000\010\037" +
    "\147\067\110\072\113\001\001\000\002\001\001\000\004" +
    "\066\146\001\001\000\010\037\145\067\110\072\113\001" +
    "\001\000\010\037\144\067\110\072\113\001\001\000\002" +
    "\001\001\000\010\037\143\067\110\072\113\001\001\000" +
    "\004\044\134\001\001\000\004\044\134\001\001\000\004" +
    "\044\134\001\001\000\002\001\001\000\004\044\134\001" +
    "\001\000\004\044\134\001\001\000\004\044\134\001\001" +
    "\000\004\044\134\001\001\000\004\044\134\001\001\000" +
    "\004\044\134\001\001\000\004\044\134\001\001\000\002" +
    "\001\001\000\010\010\160\046\045\066\062\001\001\000" +
    "\004\066\057\001\001\000\010\037\162\067\110\072\113" +
    "\001\001\000\004\044\134\001\001\000\004\044\134\001" +
    "\001\000\010\037\165\067\110\072\113\001\001\000\004" +
    "\044\134\001\001\000\010\037\175\067\110\072\113\001" +
    "\001\000\012\037\170\043\171\067\110\072\113\001\001" +
    "\000\004\044\134\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\037\170\043\174\067\110\072\113\001\001" +
    "\000\002\001\001\000\004\044\134\001\001\000\002\001" +
    "\001\000\010\037\200\067\110\072\113\001\001\000\004" +
    "\044\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\134\001\001\000\010\037\210\067\110\072\113\001" +
    "\001\000\004\044\134\001\001\000\010\037\212\067\110" +
    "\072\113\001\001\000\004\044\134\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\044\134\001\001\000\004" +
    "\044\134\001\001\000\002\001\001\000\016\006\221\007" +
    "\047\010\043\012\223\046\045\066\046\001\001\000\002" +
    "\001\001\000\004\066\256\001\001\000\006\013\225\014" +
    "\226\001\001\000\010\066\036\070\255\071\234\001\001" +
    "\000\002\001\001\000\004\015\230\001\001\000\010\066" +
    "\036\070\235\071\234\001\001\000\004\016\232\001\001" +
    "\000\010\066\036\070\233\071\234\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\020\241\021\237\022\240\037\117\067\110\072" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\026\244\027\243\066\245\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\020\247\037\117\067\110\072\113\001\001\000\002\001" +
    "\001\000\010\026\251\027\243\066\245\001\001\000\002" +
    "\001\001\000\010\026\253\027\243\066\245\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\006\260\007\047\010\043\046\045\066" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\010\263\046\045\066\062\001\001\000\006\040\264\066" +
    "\057\001\001\000\002\001\001\000\016\037\170\041\266" +
    "\042\270\043\267\067\110\072\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\037\170" +
    "\041\272\042\270\043\267\067\110\072\113\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\037\275\067\110" +
    "\072\113\001\001\000\004\044\134\001\001\000\012\007" +
    "\277\010\043\046\045\066\062\001\001\000\002\001\001" +
    "\000\016\006\074\007\047\010\043\011\301\046\045\066" +
    "\046\001\001\000\002\001\001\000\006\066\036\071\303" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\010" +
    "\307\030\311\031\306\032\310\046\045\066\062\001\001" +
    "\000\002\001\001\000\004\066\057\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\010\314" +
    "\046\045\066\062\001\001\000\004\066\057\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\033\322\034\323" +
    "\035\320\066\321\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\326\046\045\066\062\001\001\000\004\066" +
    "\057\001\001\000\010\037\330\067\110\072\113\001\001" +
    "\000\004\044\134\001\001\000\010\010\332\046\045\066" +
    "\062\001\001\000\004\066\057\001\001\000\002\001\001" +
    "\000\010\034\335\035\320\066\321\001\001\000\002\001" +
    "\001\000\006\060\u0196\066\u013c\001\001\000\010\063\343" +
    "\064\340\065\342\001\001\000\002\001\001\000\010\050" +
    "\u0195\051\357\066\374\001\001\000\006\064\u0194\065\342" +
    "\001\001\000\002\001\001\000\006\066\036\071\346\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\006\350" +
    "\007\047\010\043\046\045\066\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\023\353\024\356\025\355" +
    "\001\001\000\006\023\353\024\u0193\001\001\000\012\020" +
    "\u0189\037\117\067\110\072\113\001\001\000\010\050\360" +
    "\051\357\066\374\001\001\000\002\001\001\000\010\051" +
    "\u018c\052\u018d\066\u018b\001\001\000\004\045\u0113\001\001" +
    "\000\006\023\353\024\u0186\001\001\000\010\050\u0178\051" +
    "\357\066\374\001\001\000\010\050\u0176\051\357\066\374" +
    "\001\001\000\010\050\u0175\051\357\066\374\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\050\u016e\051\357" +
    "\066\374\001\001\000\016\006\074\007\047\010\043\011" +
    "\u016c\046\045\066\046\001\001\000\004\066\u0165\001\001" +
    "\000\010\050\u0163\051\357\066\374\001\001\000\010\050" +
    "\u0156\051\357\066\374\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\050\u014e\051\357\066\374\001\001\000" +
    "\002\001\001\000\004\066\u012d\001\001\000\002\001\001" +
    "\000\004\066\u012b\001\001\000\004\055\u0128\001\001\000" +
    "\002\001\001\000\010\063\u0106\064\340\065\342\001\001" +
    "\000\002\001\001\000\010\023\353\024\356\025\u0108\001" +
    "\001\000\010\050\u0109\051\357\066\374\001\001\000\004" +
    "\045\u0113\001\001\000\010\050\u0127\051\357\066\374\001" +
    "\001\000\010\050\u0126\051\357\066\374\001\001\000\010" +
    "\050\u0125\051\357\066\374\001\001\000\010\050\u0124\051" +
    "\357\066\374\001\001\000\010\050\u0123\051\357\066\374" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\050\u0122\051\357\066\374\001\001\000\010" +
    "\050\u0121\051\357\066\374\001\001\000\014\020\241\022" +
    "\u011f\037\117\067\110\072\113\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\050\u011e\051\357\066\374\001" +
    "\001\000\010\050\u011d\051\357\066\374\001\001\000\002" +
    "\001\001\000\014\020\241\022\u011b\037\117\067\110\072" +
    "\113\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\045\u0113\001\001\000\004\045\u0113\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\045\u0113\001\001\000\004" +
    "\045\u0113\001\001\000\004\045\u0113\001\001\000\004\045" +
    "\u0113\001\001\000\004\045\u0113\001\001\000\004\045\u0113" +
    "\001\001\000\004\045\u0113\001\001\000\002\001\001\000" +
    "\014\006\u012a\007\047\010\043\046\045\066\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\060\u013d\066" +
    "\u013c\001\001\000\010\063\u012f\064\340\065\342\001\001" +
    "\000\010\050\u0135\051\357\066\374\001\001\000\002\001" +
    "\001\000\010\023\353\024\356\025\u0131\001\001\000\010" +
    "\050\u0132\051\357\066\374\001\001\000\004\045\u0113\001" +
    "\001\000\010\050\u0134\051\357\066\374\001\001\000\004" +
    "\045\u0113\001\001\000\004\045\u0113\001\001\000\010\050" +
    "\u0137\051\357\066\374\001\001\000\004\045\u0113\001\001" +
    "\000\010\050\u0139\051\357\066\374\001\001\000\004\045" +
    "\u0113\001\001\000\010\050\u013b\051\357\066\374\001\001" +
    "\000\004\045\u0113\001\001\000\010\063\u0140\064\340\065" +
    "\342\001\001\000\002\001\001\000\010\050\u013f\051\357" +
    "\066\374\001\001\000\004\045\u0113\001\001\000\002\001" +
    "\001\000\014\006\u0142\007\047\010\043\046\045\066\046" +
    "\001\001\000\004\061\u0144\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\023\353\024\356\025\u0146\001\001" +
    "\000\010\050\u0147\051\357\066\374\001\001\000\004\045" +
    "\u0113\001\001\000\012\037\u014a\062\u0149\067\110\072\113" +
    "\001\001\000\002\001\001\000\004\044\134\001\001\000" +
    "\004\066\u014c\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\045\u0113\001\001\000\010\050\u0155\051\357\066" +
    "\374\001\001\000\010\050\u0151\051\357\066\374\001\001" +
    "\000\004\045\u0113\001\001\000\002\001\001\000\010\050" +
    "\u0154\051\357\066\374\001\001\000\004\045\u0113\001\001" +
    "\000\004\045\u0113\001\001\000\004\045\u0113\001\001\000" +
    "\010\053\u0158\054\u0159\066\u015a\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\066\u015b\001\001\000\002\001" +
    "\001\000\010\050\u015d\051\357\066\374\001\001\000\004" +
    "\045\u0113\001\001\000\010\050\u015f\051\357\066\374\001" +
    "\001\000\004\045\u0113\001\001\000\010\053\u0161\054\u0159" +
    "\066\u015a\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\045\u0113\001\001\000\002\001\001\000\004\055\u016b" +
    "\001\001\000\004\066\u0167\001\001\000\010\050\u0168\051" +
    "\357\066\374\001\001\000\004\045\u0113\001\001\000\004" +
    "\055\u016a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\045\u0113\001\001" +
    "\000\010\050\u0170\051\357\066\374\001\001\000\004\045" +
    "\u0113\001\001\000\010\050\u0172\051\357\066\374\001\001" +
    "\000\004\045\u0113\001\001\000\010\050\u0174\051\357\066" +
    "\374\001\001\000\004\045\u0113\001\001\000\004\045\u0113" +
    "\001\001\000\004\045\u0113\001\001\000\002\001\001\000" +
    "\004\045\u0113\001\001\000\004\056\u017a\001\001\000\010" +
    "\050\u0183\051\357\066\374\001\001\000\004\057\u017d\001" +
    "\001\000\012\020\u0182\037\117\067\110\072\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\037\u014a\062" +
    "\u0180\067\110\072\113\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\u0113\001\001\000" +
    "\002\001\001\000\012\020\u0189\037\117\067\110\072\113" +
    "\001\001\000\002\001\001\000\010\050\u0188\051\357\066" +
    "\374\001\001\000\004\045\u0113\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\051\u018c\052" +
    "\u018e\066\u018b\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\050\u0190\051\357\066\374\001\001\000\004\045" +
    "\u0113\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\045\u0113\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\037\u019a\067\110\072\113\001\001\000\004\044\134\001" +
    "\001\000\002\001\001\000\010\037\u019d\067\110\072\113" +
    "\001\001\000\004\044\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\010\u01a1\046\045\066\062\001\001" +
    "\000\004\066\057\001\001\000\002\001\001\000\012\033" +
    "\u01a4\034\323\035\320\066\321\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\037\u01a7\067\110\072\113\001" +
    "\001\000\004\044\134\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



/* VERBATIM */


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // ident_or_string ::= STRING_LITERAL 
            {
              Object RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new String(s); 
              CUP$parser$result = new java_cup.runtime.Symbol(56/*ident_or_string*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // ident_or_string ::= IDENTIFIER 
            {
              Object RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = id; 
              CUP$parser$result = new java_cup.runtime.Symbol(56/*ident_or_string*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // list1_ident_sep_comma ::= ident COMMA list1_ident_sep_comma 
            {
              List1IdentSep RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List1IdentSep l = (List1IdentSep)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 l.add(id); RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(55/*list1_ident_sep_comma*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // list1_ident_sep_comma ::= ident 
            {
              List1IdentSep RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 List1IdentSep l = new List1IdentSep(); l.add(id); RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(55/*list1_ident_sep_comma*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // list0_ident_sep_comma ::= list1_ident_sep_comma 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List1IdentSep l = (List1IdentSep)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(54/*list0_ident_sep_comma*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // list0_ident_sep_comma ::= 
            {
              Object RESULT = null;
		 /* do nothing */ 
              CUP$parser$result = new java_cup.runtime.Symbol(54/*list0_ident_sep_comma*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // qualid_ident ::= IDENTIFIER AT IDENTIFIER 
            {
              QIdent RESULT = null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new QIdentAt(new Loc(id1left, id1right), id1, id2);

              CUP$parser$result = new java_cup.runtime.Symbol(53/*qualid_ident*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // qualid_ident ::= IDENTIFIER AT 
            {
              QIdent RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new QIdentAt(new Loc(idleft, idright), id, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(53/*qualid_ident*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // qualid_ident ::= IDENTIFIER 
            {
              QIdent RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new QIdentId(new Loc(idleft, idright), id); 
              CUP$parser$result = new java_cup.runtime.Symbol(53/*qualid_ident*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // ident ::= IDENTIFIER 
            {
              Ident RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Ident(new Loc(idleft, idright), id); 
              CUP$parser$result = new java_cup.runtime.Symbol(52/*ident*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // relation_id ::= NOTEQ 
            {
              Relation RESULT = null;
		 RESULT = new Relation("<>"); 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*relation_id*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // relation_id ::= EQUAL 
            {
              Relation RESULT = null;
		 RESULT = new Relation("="); 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*relation_id*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // relation_id ::= GE 
            {
              Relation RESULT = null;
		 RESULT = new Relation(">="); 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*relation_id*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // relation_id ::= GT 
            {
              Relation RESULT = null;
		 RESULT = new Relation(">"); 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*relation_id*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // relation_id ::= LE 
            {
              Relation RESULT = null;
		 RESULT = new Relation("<="); 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*relation_id*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // relation_id ::= LT 
            {
              Relation RESULT = null;
		 RESULT = new Relation("<"); 
              CUP$parser$result = new java_cup.runtime.Symbol(35/*relation_id*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // binder ::= LEFTPAR list1_ident_sep_comma COLON type_v RIGHTPAR 
            {
              Binder RESULT = null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List1IdentSep l = (List1IdentSep)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeV t = (TypeV)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Binder(new Loc(lpleft, lpright), l, t); 
              CUP$parser$result = new java_cup.runtime.Symbol(51/*binder*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // binder ::= LEFTPAR RIGHTPAR 
            {
              Binder RESULT = null;
		int lpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object lp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Binder(new Loc(lpleft, lpright), null, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(51/*binder*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // list1_binder ::= binder list1_binder 
            {
              ListBinder RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Binder b = (Binder)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ListBinder l = (ListBinder)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 l.add(b); RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*list1_binder*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // list1_binder ::= binder 
            {
              ListBinder RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Binder b = (Binder)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 ListBinder l = new ListBinder(); l.add(b); RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(50/*list1_binder*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // binders ::= list1_binder 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ListBinder l = (ListBinder)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(49/*binders*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // variant ::= lexpr 
            {
              Variant RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LExpr l = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Variant(new Loc(lleft, lright), l, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*variant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // variant ::= lexpr FOR ident 
            {
              Variant RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LExpr l = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Variant(new Loc(lleft, lright), l, id); 
              CUP$parser$result = new java_cup.runtime.Symbol(48/*variant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // opt_variant ::= 
            {
              OptVar RESULT = null;
		 /* do nothing */ 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*opt_variant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // opt_variant ::= LEFTB VARIANT variant RIGHTB 
            {
              OptVar RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Variant v = (Variant)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new OptVar(new Loc(lleft, lright), v); 
              CUP$parser$result = new java_cup.runtime.Symbol(47/*opt_variant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // recfun ::= ident binders COLON type_v opt_variant EQUAL list0_bracket_assertion expr 
            {
              Recfun RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		TypeV t = (TypeV)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		OptVar o = (OptVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int l0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int l0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List0BrAssert l0 = (List0BrAssert)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Recfun(new Loc(idleft, idright), id, b, t, o, l0, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(46/*recfun*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // opt_invariant ::= INVARIANT assertion 
            {
              OptInv RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Assert a = (Assert)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new OptInv(new Loc(ileft, iright), a); 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*opt_invariant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // opt_invariant ::= 
            {
              OptInv RESULT = null;
		 /* do nothing */ 
              CUP$parser$result = new java_cup.runtime.Symbol(45/*opt_invariant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // invariant_variant ::= LEFTB opt_invariant VARIANT variant RIGHTB 
            {
              InvVar RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		OptInv o = (OptInv)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Variant v = (Variant)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InvVar(new Loc(lleft, lright), o, v); 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*invariant_variant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // invariant_variant ::= LEFTB opt_invariant RIGHTB 
            {
              InvVar RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		OptInv o = (OptInv)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InvVar(new Loc(lleft, lright), o, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*invariant_variant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // invariant_variant ::= 
            {
              InvVar RESULT = null;
		 /* do nothing */ 
              CUP$parser$result = new java_cup.runtime.Symbol(44/*invariant_variant*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // opt_cast ::= COLON type_v 
            {
              OptCast RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TypeV t = (TypeV)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new OptCast(new Loc(cleft, cright), t); 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*opt_cast*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // opt_cast ::= 
            {
              OptCast RESULT = null;
		 /* do nothing */ 
              CUP$parser$result = new java_cup.runtime.Symbol(43/*opt_cast*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // handler ::= ident ident ARROW expr 
            {
              Handler RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int jdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int jdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Ident jd = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Handler(new Loc(idleft, idright), id, jd, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*handler*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // handler ::= ident ARROW expr 
            {
              Handler RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Handler(new Loc(idleft, idright), id, null, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*handler*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // list1_handler_sep_bar ::= handler BAR list1_handler_sep_bar 
            {
              ListHandler RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Handler h = (Handler)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ListHandler l = (ListHandler)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 l.add(h); RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*list1_handler_sep_bar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // list1_handler_sep_bar ::= handler 
            {
              ListHandler RESULT = null;
		int hleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int hright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Handler h = (Handler)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 ListHandler l = new ListHandler(); l.add(h); RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*list1_handler_sep_bar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // list1_simple_expr ::= simple_expr list1_simple_expr 
            {
              ListSimpleExpr RESULT = null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr se = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ListSimpleExpr l = (ListSimpleExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 l.add(se); RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*list1_simple_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // list1_simple_expr ::= simple_expr 
            {
              ListSimpleExpr RESULT = null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr se = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 ListSimpleExpr l = new ListSimpleExpr(); l.add(se); RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*list1_simple_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // simple_expr ::= BEGIN expr END 
            {
              Expr RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprBegin(new Loc(bleft, bright), e); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*simple_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // simple_expr ::= LEFTPAR expr RIGHTPAR 
            {
              Expr RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprExprPar(new Loc(lleft, lright), e); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*simple_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // simple_expr ::= LEFTSQ type_c RIGHTSQ 
            {
              Expr RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeC t = (TypeC)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprTypeSQ(new Loc(lleft, lright), t); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*simple_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // simple_expr ::= ident LEFTSQ expr RIGHTSQ 
            {
              Expr RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprExprSQ(new Loc(idleft, idright), id, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*simple_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // simple_expr ::= BANG ident 
            {
              Expr RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprBang(new Loc(bleft, bright), id); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*simple_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // simple_expr ::= FALSE 
            {
              Expr RESULT = null;
		 RESULT = new ExprBoolean(false); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*simple_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // simple_expr ::= TRUE 
            {
              Expr RESULT = null;
		 RESULT = new ExprBoolean(true); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*simple_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // simple_expr ::= VOID 
            {
              Expr RESULT = null;
		 RESULT = new ExprVoid(); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*simple_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // simple_expr ::= FLOAT_LITERAL 
            {
              Expr RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprFloat(f); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*simple_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // simple_expr ::= INTEGER_LITERAL 
            {
              Expr RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprInt(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*simple_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // simple_expr ::= ident 
            {
              Expr RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprIdent(id); 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*simple_expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // expr ::= expr LEFTBLEFTB post_condition RIGHTBRIGHTB 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PostCond p = (PostCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprPCond2(new Loc(eleft, eright), e, p); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // expr ::= expr LEFTB post_condition RIGHTB 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PostCond p = (PostCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprPCond(new Loc(eleft, eright), e, p); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // expr ::= ASSERT list1_bracket_assertion SEMICOLON expr 
            {
              Expr RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List1BrAssert l = (List1BrAssert)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprAssert(new Loc(aleft, aright), l, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // expr ::= expr SEMICOLON expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprColon(new Loc(eleft, eright), e, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expr ::= MINUS expr 
            {
              Expr RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprMinus(new Loc(mleft, mright), e); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // expr ::= expr PERCENT expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprPercent(new Loc(eleft, eright), e, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // expr ::= expr SLASH expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprSlash(new Loc(eleft, eright), e, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // expr ::= expr TIMES expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprTimes(new Loc(eleft, eright), e, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // expr ::= expr MINUS expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprLess(new Loc(eleft, eright), e, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // expr ::= expr PLUS expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprPlus(new Loc(eleft, eright), e, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // expr ::= expr relation_id expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprRel(new Loc(eleft, eright), e, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // expr ::= NOT expr 
            {
              Expr RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprNot(new Loc(nleft, nright), e); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // expr ::= expr AMPAMP expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprAmpAmp(new Loc(eleft, eright), e, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // expr ::= expr BARBAR expr 
            {
              Expr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprBarBar(new Loc(eleft, eright), e, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // expr ::= simple_expr list1_simple_expr 
            {
              Expr RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr s = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ListSimpleExpr l = (ListSimpleExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprSExpr(new Loc(sleft, sright), s, l); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // expr ::= ABSURD opt_cast 
            {
              Expr RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		OptCast o = (OptCast)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprAbsurd(new Loc(aleft, aright), o); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // expr ::= TRY expr WITH list1_handler_sep_bar END 
            {
              Expr RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListHandler l = (ListHandler)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprTry(new Loc(tleft, tright), e, l); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // expr ::= RAISE LEFTPAR ident expr RIGHTPAR opt_cast 
            {
              Expr RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		OptCast o = (OptCast)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprRaise2(new Loc(rleft, rright), id, e, o); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // expr ::= RAISE ident opt_cast 
            {
              Expr RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		OptCast o = (OptCast)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprRaise(new Loc(rleft, rright), id, o); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expr ::= LET REC recfun IN expr 
            {
              Expr RESULT = null;
		int letleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int letright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object let = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Recfun r = (Recfun)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprLetRecIn(new Loc(letleft, letright), r, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expr ::= LET REC recfun 
            {
              Expr RESULT = null;
		int letleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int letright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object let = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Recfun r = (Recfun)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprLetRec(new Loc(letleft, letright), r); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // expr ::= LET ident binders EQUAL list0_bracket_assertion expr IN expr 
            {
              Expr RESULT = null;
		int letleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int letright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object let = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int l0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int l0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List0BrAssert l0 = (List0BrAssert)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprLetEq(new Loc(letleft, letright), id, b, l0, e, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // expr ::= FUN binders ARROW list0_bracket_assertion expr 
            {
              Expr RESULT = null;
		int funleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int funright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object fun = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int l0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int l0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List0BrAssert l0 = (List0BrAssert)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprFun(new Loc(funleft, funright), b, l0, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // expr ::= LET ident EQUAL REF expr IN expr 
            {
              Expr RESULT = null;
		int letleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int letright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object let = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprLetRefIn(new Loc(letleft, letright), id, e, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // expr ::= LET ident EQUAL expr IN expr 
            {
              Expr RESULT = null;
		int letleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int letright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object let = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprLetIn(new Loc(letleft, letright), id, e, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // expr ::= IDENTIFIER COLON expr 
            {
              Expr RESULT = null;
		int identleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int identright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ident = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprIdentifier(new Loc(identleft, identright), ident, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // expr ::= WHILE expr DO invariant_variant expr DONE 
            {
              Expr RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int invleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int invright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		InvVar inv = (InvVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ExprWhile(new Loc(wleft, wright), e, inv, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // expr ::= IF expr THEN expr 
            {
              Expr RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprIfThenElse(new Loc(ileft, iright), e, f, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // expr ::= IF expr THEN expr ELSE expr 
            {
              Expr RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr g = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprIfThenElse(new Loc(ileft, iright), e, f, g); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // expr ::= ident LEFTSQ expr RIGHTSQ COLONEQUAL expr 
            {
              Expr RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr f = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprIdExprExpr(new Loc(idleft, idright), id, e, f); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // expr ::= ident COLONEQUAL expr 
            {
              Expr RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new ExprIdExpr(new Loc(idleft, idright), id, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // expr ::= simple_expr 
            {
              Expr RESULT = null;
		int seleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int seright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr se = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = se; 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // list1_type_var_sep_comma ::= type_var COMMA list1_type_var_sep_comma 
            {
              List1TypeVar RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TypeVar t = (TypeVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List1TypeVar l = (List1TypeVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 l.add(t); RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*list1_type_var_sep_comma*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // list1_type_var_sep_comma ::= type_var 
            {
              List1TypeVar RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TypeVar t = (TypeVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 List1TypeVar l = new List1TypeVar(); l.add(t); RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*list1_type_var_sep_comma*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // type_var ::= QUOTE ident 
            {
              TypeVar RESULT = null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object q = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TypeVar(new Loc(qleft, qright), id); 
              CUP$parser$result = new java_cup.runtime.Symbol(36/*type_var*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // relation ::= NOTEQ 
            {
              Relation RESULT = null;
		 RESULT = new Relation(" <> "); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // relation ::= EQUAL 
            {
              Relation RESULT = null;
		 RESULT = new Relation(" = "); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // relation ::= GE 
            {
              Relation RESULT = null;
		 RESULT = new Relation(" >= "); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // relation ::= GT 
            {
              Relation RESULT = null;
		 RESULT = new Relation(" > "); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // relation ::= LE 
            {
              Relation RESULT = null;
		 RESULT = new Relation(" <= "); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // relation ::= LT 
            {
              Relation RESULT = null;
		 RESULT = new Relation(" < "); 
              CUP$parser$result = new java_cup.runtime.Symbol(34/*relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // list1_lexpr_sep_comma ::= lexpr COMMA list1_lexpr_sep_comma 
            {
              List1LExpr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LExpr e = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List1LExpr l = (List1LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 l.add(e); RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*list1_lexpr_sep_comma*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // list1_lexpr_sep_comma ::= lexpr 
            {
              List1LExpr RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LExpr e = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 List1LExpr l = new List1LExpr(); l.add(e); RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(33/*list1_lexpr_sep_comma*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // trigger ::= list1_lexpr_sep_comma 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List1LExpr l = (List1LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(32/*trigger*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // list1_trigger_sep_bar ::= trigger BAR list1_trigger_sep_bar 
            {
              ListTrigger RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ListTrigger l = (ListTrigger)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 l.add(t); RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*list1_trigger_sep_bar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // list1_trigger_sep_bar ::= trigger 
            {
              ListTrigger RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 ListTrigger l = new ListTrigger(); l.add(t); RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*list1_trigger_sep_bar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // triggers ::= LEFTSQ list1_trigger_sep_bar RIGHTSQ 
            {
              Triggers RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ltleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ListTrigger lt = (ListTrigger)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Triggers(new Loc(lleft, lright), lt); 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*triggers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // triggers ::= 
            {
              Triggers RESULT = null;
		 /* do nothing */ 
              CUP$parser$result = new java_cup.runtime.Symbol(30/*triggers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // lexpr ::= ident_or_string COLON lexpr 
            {
              LExpr RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LExpr e = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LExprIdStr(new Loc(idleft, idright), id, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*lexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // lexpr ::= LEFTPAR lexpr RIGHTPAR 
            {
              LExpr RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LExpr e = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LExprPar(new Loc(lleft, lright), e); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*lexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // lexpr ::= VOID 
            {
              LExpr RESULT = null;
		 RESULT = new LExprVoid(); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*lexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // lexpr ::= FALSE 
            {
              LExpr RESULT = null;
		 RESULT = new LExprBool(false); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*lexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // lexpr ::= TRUE 
            {
              LExpr RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LExprBool(true); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*lexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // lexpr ::= FLOAT_LITERAL 
            {
              LExpr RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LExprFloat(f); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*lexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // lexpr ::= INTEGER_LITERAL 
            {
              LExpr RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LExprInteger(i); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*lexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // lexpr ::= FPI LEFTPAR lexpr COMMA FLOAT_LITERAL COMMA FLOAT_LITERAL RIGHTPAR 
            {
              LExpr RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		LExpr l = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int f1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String f1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String f2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LExprFpi(new Loc(fleft, fright), l, f1, f2); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*lexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // lexpr ::= EXISTS ident COLON primitive_type DOT lexpr 
            {
              LExpr RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object ex = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PType p = (PType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LExpr l = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LExprExists(new Loc(exleft, exright), id, p, l); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*lexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // lexpr ::= FORALL list1_ident_sep_comma COLON primitive_type triggers DOT lexpr 
            {
              LExpr RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		List1IdentSep l = (List1IdentSep)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		PType p = (PType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Triggers t = (Triggers)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LExpr e = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LExprForall(new Loc(fleft, fright), l, p, t, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*lexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // lexpr ::= IF lexpr THEN lexpr ELSE lexpr 
            {
              LExpr RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		LExpr l1 = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LExpr l2 = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int l3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int l3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LExpr l3 = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LExprIf(new Loc(ileft, iright), l1, l2, l3); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*lexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // lexpr ::= qualid_ident LEFTSQ lexpr RIGHTSQ 
            {
              LExpr RESULT = null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		QIdent q = (QIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LExpr e = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LExprIdentExpr(new Loc(qleft, qright), q, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*lexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // lexpr ::= qualid_ident LEFTPAR list1_lexpr_sep_comma RIGHTPAR 
            {
              LExpr RESULT = null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		QIdent q = (QIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List1LExpr l = (List1LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LExprIdentList(new Loc(qleft, qright), q, l); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*lexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // lexpr ::= qualid_ident 
            {
              LExpr RESULT = null;
		int qleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int qright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		QIdent q = (QIdent)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LExprQIdent(new Loc(qleft, qright), q); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*lexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // lexpr ::= MINUS lexpr 
            {
              LExpr RESULT = null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LExpr l = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LExprMinus(new Loc(mleft, mright), l); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*lexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // lexpr ::= lexpr PERCENT lexpr 
            {
              LExpr RESULT = null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LExpr l1 = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LExpr l2 = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LExprPercent(new Loc(l1left, l1right), l1, l2); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*lexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // lexpr ::= lexpr SLASH lexpr 
            {
              LExpr RESULT = null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LExpr l1 = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LExpr l2 = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LExprSlash(new Loc(l1left, l1right), l1, l2); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*lexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // lexpr ::= lexpr TIMES lexpr 
            {
              LExpr RESULT = null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LExpr l1 = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LExpr l2 = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LExprTimes(new Loc(l1left, l1right), l1, l2); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*lexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // lexpr ::= lexpr MINUS lexpr 
            {
              LExpr RESULT = null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LExpr l1 = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LExpr l2 = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LExprLess(new Loc(l1left, l1right), l1, l2); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*lexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // lexpr ::= lexpr PLUS lexpr 
            {
              LExpr RESULT = null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LExpr l1 = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LExpr l2 = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LExprPlus(new Loc(l1left, l1right), l1, l2); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*lexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // lexpr ::= lexpr relation lexpr 
            {
              LExpr RESULT = null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LExpr l1 = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Relation r = (Relation)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LExpr l2 = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LExprRel(new Loc(l1left, l1right), l1, r, l2); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*lexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // lexpr ::= NOT lexpr 
            {
              LExpr RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LExpr l = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LExprNot(new Loc(nleft, nright), l); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*lexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // lexpr ::= lexpr AND lexpr 
            {
              LExpr RESULT = null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LExpr l1 = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LExpr l2 = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LExprAnd(new Loc(l1left, l1right), l1, l2); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*lexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // lexpr ::= lexpr OR lexpr 
            {
              LExpr RESULT = null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LExpr l1 = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LExpr l2 = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LExprOr(new Loc(l1left, l1right), l1, l2); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*lexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // lexpr ::= lexpr LRARROW lexpr 
            {
              LExpr RESULT = null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LExpr l1 = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LExpr l2 = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LExprLRArrow(new Loc(l1left, l1right), l1, l2); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*lexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // lexpr ::= lexpr ARROW lexpr 
            {
              LExpr RESULT = null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LExpr l1 = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LExpr l2 = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LExprArrow(new Loc(l1left, l1right), l1, l2); 
              CUP$parser$result = new java_cup.runtime.Symbol(29/*lexpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // external_ ::= EXTERNAL 
            {
              External RESULT = null;
		 RESULT = new External(); 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*external_*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // external_ ::= 
            {
              External RESULT = null;
		 /* do nothing */ 
              CUP$parser$result = new java_cup.runtime.Symbol(28/*external_*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // logic_binder ::= ident COLON primitive_type ARRAY 
            {
              LogicBinder RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PType p = (PType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new LogicBinder2(new Loc(idleft, idright), id, p); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*logic_binder*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // logic_binder ::= ident COLON primitive_type 
            {
              LogicBinder RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		PType p = (PType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LogicBinder1(new Loc(idleft, idright), id, p); 
              CUP$parser$result = new java_cup.runtime.Symbol(27/*logic_binder*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // list1_logic_binder_sep_comma ::= logic_binder COMMA list1_logic_binder_sep_comma 
            {
              ListLBinder RESULT = null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LogicBinder lb = (LogicBinder)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ListLBinder l = (ListLBinder)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 l.add(lb); RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*list1_logic_binder_sep_comma*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // list1_logic_binder_sep_comma ::= logic_binder 
            {
              ListLBinder RESULT = null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LogicBinder lb = (LogicBinder)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 ListLBinder l = new ListLBinder(); l.add(lb); RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(26/*list1_logic_binder_sep_comma*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // list0_logic_binder_sep_comma ::= list1_logic_binder_sep_comma 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ListLBinder l = (ListLBinder)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*list0_logic_binder_sep_comma*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // list0_logic_binder_sep_comma ::= 
            {
              Object RESULT = null;
		 /* do nothing */ 
              CUP$parser$result = new java_cup.runtime.Symbol(25/*list0_logic_binder_sep_comma*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // list1_primitive_type_sep_comma ::= primitive_type COMMA list1_primitive_type_sep_comma 
            {
              List1PType RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PType p = (PType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List1PType l = (List1PType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 l.add(p); RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*list1_primitive_type_sep_comma*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // list1_primitive_type_sep_comma ::= primitive_type 
            {
              List1PType RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		PType p = (PType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 List1PType l = new List1PType(); l.add(p); RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(24/*list1_primitive_type_sep_comma*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // list0_primitive_type_sep_comma ::= list1_primitive_type_sep_comma 
            {
              Object RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List1PType l = (List1PType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*list0_primitive_type_sep_comma*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // list0_primitive_type_sep_comma ::= 
            {
              Object RESULT = null;
		 /* do nothing */ 
              CUP$parser$result = new java_cup.runtime.Symbol(23/*list0_primitive_type_sep_comma*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // logic_type ::= primitive_type 
            {
              LogicType RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		PType p = (PType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LogicType4(new Loc(pleft, pright), p); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*logic_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // logic_type ::= list0_primitive_type_sep_comma ARROW primitive_type 
            {
              LogicType RESULT = null;
		int l0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		PType p = (PType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LogicType3(new Loc(l0left, l0right), l0, p); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*logic_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // logic_type ::= PROP 
            {
              LogicType RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new LogicType2(new Loc(pleft, pright)); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*logic_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // logic_type ::= list0_primitive_type_sep_comma ARROW PROP 
            {
              LogicType RESULT = null;
		int l0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new LogicType1(new Loc(l0left, l0right), l0); 
              CUP$parser$result = new java_cup.runtime.Symbol(22/*logic_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // exn_condition ::= ident BIGARROW assertion 
            {
              Condition RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int assleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int assright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Assert ass = (Assert)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Condition(new Loc(idleft, idright), id, ass); 
              CUP$parser$result = new java_cup.runtime.Symbol(21/*exn_condition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // list1_exn_condition_sep_bar ::= exn_condition BAR list1_exn_condition_sep_bar 
            {
              ListCondition RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Condition e = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ListCondition l = (ListCondition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 l.add(e); RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*list1_exn_condition_sep_bar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // list1_exn_condition_sep_bar ::= exn_condition 
            {
              ListCondition RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Condition e = (Condition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 ListCondition l = new ListCondition(); l.add(e); RESULT = l; 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*list1_exn_condition_sep_bar*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // list0_bracket_assertion ::= list1_bracket_assertion 
            {
              List0BrAssert RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List1BrAssert l = (List1BrAssert)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new List0BrAssert(new Loc(lleft, lright), l); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*list0_bracket_assertion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // list0_bracket_assertion ::= LEFTB RIGHTB 
            {
              List0BrAssert RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new List0BrAssert(new Loc(lleft, lright), null); 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*list0_bracket_assertion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // list0_bracket_assertion ::= 
            {
              List0BrAssert RESULT = null;
		 /* do nothing */ 
              CUP$parser$result = new java_cup.runtime.Symbol(19/*list0_bracket_assertion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // list1_bracket_assertion ::= bracket_assertion list1_bracket_assertion 
            {
              List1BrAssert RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BrAssert b = (BrAssert)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lbaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lbaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List1BrAssert lba = (List1BrAssert)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 lba.add(b); RESULT = lba; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*list1_bracket_assertion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // list1_bracket_assertion ::= bracket_assertion 
            {
              List1BrAssert RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		BrAssert b = (BrAssert)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 List1BrAssert lba = new List1BrAssert(); lba.add(b); RESULT = lba; 
              CUP$parser$result = new java_cup.runtime.Symbol(18/*list1_bracket_assertion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // bracket_assertion ::= LEFTB assertion RIGHTB 
            {
              BrAssert RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Assert a = (Assert)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new BrAssert(new Loc(lleft, lright), a); 
              CUP$parser$result = new java_cup.runtime.Symbol(17/*bracket_assertion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // post_condition ::= BAR list1_exn_condition_sep_bar 
            {
              PostCond RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ListCondition l1 = (ListCondition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PostCond(new Loc(bleft, bright), null, l1); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*post_condition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // post_condition ::= assertion BAR list1_exn_condition_sep_bar 
            {
              PostCond RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Assert a = (Assert)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		ListCondition l1 = (ListCondition)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PostCond(new Loc(aleft, aright), a, l1); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*post_condition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // post_condition ::= assertion 
            {
              PostCond RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Assert a = (Assert)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PostCond(new Loc(aleft, aright), a, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(16/*post_condition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // opt_post_condition ::= post_condition 
            {
              Object RESULT = null;
		int postleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int postright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		PostCond post = (PostCond)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = post; 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*opt_post_condition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // opt_post_condition ::= 
            {
              Object RESULT = null;
		 /* do nothing */ 
              CUP$parser$result = new java_cup.runtime.Symbol(15/*opt_post_condition*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // assertion ::= lexpr AS ident 
            {
              Assert RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LExpr l = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Assert(new Loc(lleft, lright), l, id); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*assertion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // assertion ::= lexpr 
            {
              Assert RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LExpr l = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Assert(new Loc(lleft, lright), l, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(14/*assertion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // opt_assertion ::= assertion 
            {
              Opt RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Assert a = (Assert)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new OptAssert(new Loc(aleft, aright), a); 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*opt_assertion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // opt_assertion ::= 
            {
              Opt RESULT = null;
		 /* do nothing */ 
              CUP$parser$result = new java_cup.runtime.Symbol(13/*opt_assertion*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // opt_raises ::= RAISES list0_ident_sep_comma 
            {
              Opt RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int l0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int l0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object l0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new OptRaises(new Loc(rleft, rright), l0); 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*opt_raises*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // opt_raises ::= 
            {
              Opt RESULT = null;
		 /* do nothing */ 
              CUP$parser$result = new java_cup.runtime.Symbol(12/*opt_raises*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // opt_writes ::= WRITES list0_ident_sep_comma 
            {
              Opt RESULT = null;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int l0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int l0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object l0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new OptWrites(new Loc(wleft, wright), l0); 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*opt_writes*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // opt_writes ::= 
            {
              Opt RESULT = null;
		 /* do nothing */ 
              CUP$parser$result = new java_cup.runtime.Symbol(11/*opt_writes*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // opt_reads ::= READS list0_ident_sep_comma 
            {
              Opt RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int l0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int l0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object l0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new OptReads(new Loc(rleft, rright), l0); 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*opt_reads*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // opt_reads ::= 
            {
              Opt RESULT = null;
		 /* do nothing */ 
              CUP$parser$result = new java_cup.runtime.Symbol(10/*opt_reads*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // effects ::= opt_reads opt_writes opt_raises 
            {
              Effects RESULT = null;
		int ordleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ordright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Opt ord = (Opt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int owrleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int owrright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Opt owr = (Opt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int orsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int orsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Opt ors = (Opt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Effects(new Loc(ordleft, ordright), ord, owr, ors); 
              CUP$parser$result = new java_cup.runtime.Symbol(9/*effects*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // result ::= type_v 
            {
              Result RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TypeV t = (TypeV)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Result(new Loc(tleft, tright), t); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*result*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // result ::= RETURNS ident COLON type_v 
            {
              Result RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TypeV t = (TypeV)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new Result(new Loc(rleft, rright), id, t); 
              CUP$parser$result = new java_cup.runtime.Symbol(8/*result*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type_c ::= type_v 
            {
              TypeC RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TypeV t = (TypeV)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TypeC(new Loc(tleft, tright), t); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*type_c*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type_c ::= LEFTB opt_assertion RIGHTB result effects LEFTB opt_post_condition RIGHTB 
            {
              TypeC RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int optaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int optaright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Opt opta = (Opt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int resleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int resright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Result res = (Result)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int effleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int effright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Effects eff = (Effects)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int optpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int optpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object optp = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new TypeC(new Loc(lleft, lright), opta, res, eff, optp); 
              CUP$parser$result = new java_cup.runtime.Symbol(7/*type_c*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // primitive_type ::= LEFTPAR primitive_type COMMA list1_primitive_type_sep_comma RIGHTPAR ident 
            {
              PType RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		PType p = (PType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List1PType l1 = (List1PType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PTypePrims(new Loc(lleft, lright), p, l1, id); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // primitive_type ::= primitive_type ident 
            {
              PType RESULT = null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PType pt = (PType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PTypePrim(new Loc(ptleft, ptright), pt, id); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // primitive_type ::= ident 
            {
              PType RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PTypeId(new Loc(idleft, idright), id); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // primitive_type ::= type_var 
            {
              PType RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TypeVar t = (TypeVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PTypeVar(new Loc(tleft, tright), t); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // primitive_type ::= UNIT 
            {
              PType RESULT = null;
		int uleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int uright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object u = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PTypeUnit(); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // primitive_type ::= REAL 
            {
              PType RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PTypeReal(); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // primitive_type ::= BOOL 
            {
              PType RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PTypeBool(); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // primitive_type ::= INT 
            {
              PType RESULT = null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new PTypeInt(); 
              CUP$parser$result = new java_cup.runtime.Symbol(6/*primitive_type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // simple_type_v ::= LEFTPAR type_v RIGHTPAR 
            {
              SType RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeV t = (TypeV)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new STypePar(new Loc(lleft, lright), t); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*simple_type_v*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // simple_type_v ::= primitive_type 
            {
              SType RESULT = null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		PType pt = (PType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new STypePType(new Loc(ptleft, ptright), pt); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*simple_type_v*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // simple_type_v ::= primitive_type REF 
            {
              SType RESULT = null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PType pt = (PType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new STypeRef(new Loc(ptleft, ptright), pt); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*simple_type_v*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // simple_type_v ::= primitive_type ARRAY 
            {
              SType RESULT = null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PType pt = (PType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new STypeArr(new Loc(ptleft, ptright), pt); 
              CUP$parser$result = new java_cup.runtime.Symbol(5/*simple_type_v*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // type_v ::= simple_type_v 
            {
              TypeV RESULT = null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		SType st = (SType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TypeV(new Loc(stleft, stright), null, st, null); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*type_v*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // type_v ::= ident COLON simple_type_v ARROW type_c 
            {
              TypeV RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SType st = (SType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TypeC t = (TypeC)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TypeV(new Loc(idleft, idright), id, st, t); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*type_v*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // type_v ::= simple_type_v ARROW type_c 
            {
              TypeV RESULT = null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		SType st = (SType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TypeC t = (TypeC)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new TypeV(new Loc(stleft, stright), null, st, t); 
              CUP$parser$result = new java_cup.runtime.Symbol(4/*type_v*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // decl ::= external_ TYPE LEFTPAR list1_type_var_sep_comma RIGHTPAR ident 
            {
              Declaration RESULT = null;
		int extleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int extright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		External ext = (External)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List1TypeVar l1 = (List1TypeVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new DType3(new Loc(extleft, extright), ext, l1, id); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // decl ::= external_ TYPE type_var ident 
            {
              Declaration RESULT = null;
		int extleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int extright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		External ext = (External)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TypeVar tv = (TypeVar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Ident i = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new DType2(new Loc(extleft, extright), ext, tv, i); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // decl ::= external_ TYPE ident 
            {
              Declaration RESULT = null;
		int extleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int extright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		External ext = (External)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Ident id = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new DType(new Loc(extleft, extright), ext, id); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // decl ::= GOAL ident COLON lexpr 
            {
              Declaration RESULT = null;
		int gleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int gright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object g = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Ident i = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LExpr le = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new DGoal(new Loc(gleft, gright), i, le); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // decl ::= FUNCTION ident LEFTPAR list0_logic_binder_sep_comma RIGHTPAR COLON primitive_type EQUAL lexpr 
            {
              Declaration RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Ident i = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int l0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int l0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object l0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PType pt = (PType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LExpr le = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new DFunc(new Loc(fleft, fright), i, l0,
pt, le); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // decl ::= PREDICATE ident LEFTPAR list0_logic_binder_sep_comma RIGHTPAR EQUAL lexpr 
            {
              Declaration RESULT = null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Ident i = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int l0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int l0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object l0 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LExpr le = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new DPred(new Loc(pleft, pright), i, l0, le); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // decl ::= AXIOM ident COLON lexpr 
            {
              Declaration RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Ident i = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int leleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int leright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LExpr le = (LExpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new DAxiom(new Loc(aleft, aright), i, le); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decl ::= external_ LOGIC list1_ident_sep_comma COLON logic_type 
            {
              Declaration RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		External e = (External)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List1IdentSep l1 = (List1IdentSep)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		LogicType l = (LogicType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new DLogic(new Loc(eleft, eright), e, l1, l); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // decl ::= external_ PARAMETER list1_ident_sep_comma COLON type_v 
            {
              Declaration RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		External e = (External)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List1IdentSep l1 = (List1IdentSep)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		TypeV t = (TypeV)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new DParam(new Loc(eleft, eright), e, l1, t); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl ::= EXCEPTION ident OF primitive_type 
            {
              Declaration RESULT = null;
		int exceptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exceptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object except = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Ident i = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		PType pt = (PType)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new DExceptOf(new Loc(exceptleft, exceptright), i, pt); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decl ::= EXCEPTION ident 
            {
              Declaration RESULT = null;
		int exceptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exceptright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object except = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Ident i = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new DExcept(new Loc(exceptleft, exceptright), i); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= LET REC recfun 
            {
              Declaration RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Recfun r = (Recfun)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new DLetRec(new Loc(lleft, lright), r); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= LET ident binders EQUAL list0_bracket_assertion expr 
            {
              Declaration RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Ident i = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int l0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int l0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List0BrAssert l0 = (List0BrAssert)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new DLetEq2(new Loc(lleft, lright), i, b, l0, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl ::= LET ident EQUAL expr 
            {
              Declaration RESULT = null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object l = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Ident i = (Ident)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new DLetEq(new Loc(lleft, lright), i, e); 
              CUP$parser$result = new java_cup.runtime.Symbol(3/*decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // list1_decl ::= decl list1_decl 
            {
              List1Decl RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List1Decl ld = (List1Decl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 ld.add(d); RESULT = ld; 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*list1_decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // list1_decl ::= decl 
            {
              List1Decl RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Declaration d = (Declaration)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new List1Decl(d); 
              CUP$parser$result = new java_cup.runtime.Symbol(2/*list1_decl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // file ::= list1_decl 
            {
              WhyFile RESULT = null;
		int ldleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int ldright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		List1Decl ld = (List1Decl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		 RESULT = new WhyFile(ld); 
              CUP$parser$result = new java_cup.runtime.Symbol(1/*file*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= file EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WhyFile start_val = (WhyFile)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

